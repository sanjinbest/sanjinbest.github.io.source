{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9f43adc8de4dbae446298e7f9209d4760afc796f","modified":1519459069000},{"_id":"source/CNAME","hash":"20bfb8edd5b467df6934849f797be99ddf2c8278","modified":1519384825000},{"_id":"source/favicon.ico","hash":"3598e0a1e2c33f264272bea5941df45368c46c4d","modified":1519451116000},{"_id":"themes/next/.DS_Store","hash":"d0035ca0a589f95c57e44740985295b48a1c3e77","modified":1519462048000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514748788000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514748788000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514748788000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514748788000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514748788000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514748788000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514748788000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514748788000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514748788000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514748788000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514748788000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514748788000},{"_id":"themes/next/_config.yml","hash":"9a34830ee045d380a682ae4601689cc9fd8e9e8b","modified":1519460038000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514748788000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514748788000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514748788000},{"_id":"source/_posts/.DS_Store","hash":"687ad47977d993dba0e45d170a974c7ab28c8a6e","modified":1519459069000},{"_id":"source/_posts/JVM运行时数据区域.md","hash":"13e67590028f5c030e68f7938bfe389ae6853c95","modified":1519455602000},{"_id":"source/_posts/spring-security-入门教程.md","hash":"2c4a7159e00377c8e651a3a290edcb22e40d204d","modified":1519455676000},{"_id":"source/_posts/内存模型.md","hash":"a7317eacf4ad069ff3cab9cabefafcc77d4f3ee1","modified":1519459254000},{"_id":"source/_posts/垃圾收集算法.md","hash":"72dc491f073dfebdc65e29024c578b403cd686d6","modified":1519459682000},{"_id":"source/_posts/对象存活算法.md","hash":"595ef9e9931572eddd3c8cc8c6df1c4ffd35af79","modified":1519458607000},{"_id":"source/about/index.md","hash":"f096d5e5e3a17d1b2a7418267175e3c96fd71346","modified":1519453021000},{"_id":"source/categories/index.md","hash":"b72c49a5b164d724425979e58f5638cf01e8fe8b","modified":1519454755000},{"_id":"source/tags/index.md","hash":"8e5d96d8ad9fb63a85f1a37a4e79225a2a8f79a2","modified":1519454746000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514748788000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514748788000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514748788000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514748788000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514748788000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514748788000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514748788000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514748788000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514748788000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514748788000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514748788000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514748788000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514748788000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514748788000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514748788000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514748788000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514748788000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514748788000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514748788000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514748788000},{"_id":"themes/next/layout/.DS_Store","hash":"9d60ab672b9e3b19bc5f80ffbb54c16b2eefb0d7","modified":1519462048000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514748788000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514748788000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514748788000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514748788000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514748788000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514748788000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514748788000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514748788000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514748788000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514748788000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514748788000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514748788000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514748788000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"source/_posts/内存模型/guanxitu.png","hash":"318fed62825acfb5630ea874e9db3223a718b688","modified":1519458918000},{"_id":"source/_posts/内存模型/shilingtu.png","hash":"887f4b6a4acb7709c82539092408294e1b3859c6","modified":1519458937000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514748788000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514748788000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514748788000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514748788000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514748788000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514748788000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fd850a7afdac9a6f1bc69122b000cf3202adc21a","modified":1519463280000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514748788000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514748788000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514748788000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514748788000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514748788000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514748788000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514748788000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514748788000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514748788000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514748788000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514748788000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514748788000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514748788000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514748788000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514748788000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514748788000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514748788000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514748788000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514748788000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514748788000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514748788000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514748788000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514748788000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514748788000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514748788000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514748788000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514748788000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514748788000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514748788000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514748788000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514748788000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514748788000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514748788000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514748788000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"source/_posts/JVM运行时数据区域/image.png","hash":"7a4296336244d0bbdbc0dc107e62549162188e6e","modified":1519455283000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514748788000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514748788000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514748788000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514748788000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514748788000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514748788000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514748788000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514748788000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514748788000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514748788000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514748788000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514748788000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514748788000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514748788000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514748788000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514748788000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514748788000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514748788000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514748788000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514748788000},{"_id":"public/about/index.html","hash":"11939824029551f712b4a8008a18e7ddd9e8a95e","modified":1519463299906},{"_id":"public/categories/index.html","hash":"d5925aa257ef22ec129ff66b07081dcf4c53a3f3","modified":1519463299906},{"_id":"public/tags/index.html","hash":"0a016aeb1816d0305df01f1fc084e804879adee2","modified":1519463299906},{"_id":"public/categories/JVM/index.html","hash":"871bf3113a336f8045ba7e608ca1cd8185b1ac03","modified":1519463299906},{"_id":"public/categories/spring/index.html","hash":"8c94da2a9ba0adb6029d2fd74d66801cfa438f52","modified":1519463299906},{"_id":"public/tags/JVM/index.html","hash":"2cae796169113e2ee7dbe68c4d5edaa7d2ad4e83","modified":1519463299906},{"_id":"public/tags/运行时区域/index.html","hash":"fd15fa3c482fd1b58b0367d4af3afec37bb3e488","modified":1519463299906},{"_id":"public/tags/spring/index.html","hash":"180a5ff1bd3c58061e02103fb6af9b6e1c406173","modified":1519463299907},{"_id":"public/tags/security/index.html","hash":"84cd51bcc404f1a0468fd3f7aab432c2311a65e3","modified":1519463299907},{"_id":"public/tags/安全/index.html","hash":"1f12278e21d5656a425ade06aaaee2c1d9826174","modified":1519463299907},{"_id":"public/tags/权限控制/index.html","hash":"03e5a5c735aaaa8ee5bdc6f3080ce93c93f0c208","modified":1519463299907},{"_id":"public/JVM/内存模型/index.html","hash":"075ae8f36bf995e138f06d314cb9ce0488cf75dc","modified":1519463299907},{"_id":"public/JVM/垃圾收集算法/index.html","hash":"c8ce0852114545a34f9b45e9c56e5bf88ce74036","modified":1519463299907},{"_id":"public/JVM/对象存活算法/index.html","hash":"3dea123baf3ed43313f329e34e8f760a8d853ef8","modified":1519463299907},{"_id":"public/JVM/JVM运行时数据区域/index.html","hash":"a2b77363f0eda46d4b85355e61d32e17360edc7b","modified":1519463299907},{"_id":"public/spring/spring-security-入门教程/index.html","hash":"e59711ec1bad072a1decbca173a0470a821fc348","modified":1519463299907},{"_id":"public/archives/index.html","hash":"f6acbc892a646f651ebcb72e30e0d7eeaac0b5e5","modified":1519463299907},{"_id":"public/archives/2018/index.html","hash":"f19d8afc5112693f66d4c179e5e47b43a6a8ef19","modified":1519463299907},{"_id":"public/archives/2018/02/index.html","hash":"cb31fc61eafc284990dbaa899421f170759041dd","modified":1519463299907},{"_id":"public/index.html","hash":"6c124655f5c7cddb07d34fe2aea8e962afde9d74","modified":1519463299907},{"_id":"public/CNAME","hash":"20bfb8edd5b467df6934849f797be99ddf2c8278","modified":1519463299914},{"_id":"public/favicon.ico","hash":"3598e0a1e2c33f264272bea5941df45368c46c4d","modified":1519463299914},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1519463299914},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1519463299914},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1519463299914},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1519463299914},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1519463299914},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1519463299914},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1519463299914},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1519463299914},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1519463299914},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1519463299914},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1519463299914},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1519463299914},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519463299915},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1519463299915},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519463299915},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1519463299915},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1519463299915},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1519463299915},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1519463299915},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1519463299915},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519463299915},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519463299915},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519463299915},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519463299915},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519463299915},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519463299915},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1519463299915},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1519463299915},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1519463299915},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1519463299916},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1519463299916},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519463299916},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1519463299916},{"_id":"public/JVM/内存模型/guanxitu.png","hash":"318fed62825acfb5630ea874e9db3223a718b688","modified":1519463299916},{"_id":"public/JVM/内存模型/shilingtu.png","hash":"887f4b6a4acb7709c82539092408294e1b3859c6","modified":1519463299916},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1519463300601},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1519463300609},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1519463300621},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1519463300621},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1519463300621},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1519463300621},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1519463300621},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1519463300621},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1519463300621},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1519463300621},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1519463300621},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1519463300622},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1519463300622},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1519463300622},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1519463300622},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1519463300622},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1519463300622},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1519463300622},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1519463300622},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1519463300622},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1519463300622},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1519463300622},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1519463300622},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1519463300622},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1519463300622},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1519463300623},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1519463300623},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1519463300623},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1519463300623},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1519463300623},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1519463300623},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1519463300624},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1519463300624},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1519463300624},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1519463300624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519463300624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1519463300624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1519463300624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519463300624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1519463300624},{"_id":"public/css/main.css","hash":"7c241ad9bd8af96fe2a0c72ddf734ff48a919123","modified":1519463300624},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1519463300624},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1519463300624},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1519463300625},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1519463300625},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1519463300625},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1519463300625},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1519463300625},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519463300625},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1519463300625},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1519463300625},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1519463300625},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1519463300625},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1519463300625},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1519463300625},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1519463300625},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1519463300626},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1519463300626},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1519463300626},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1519463300626},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1519463300626},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1519463300626},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1519463300627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1519463300627},{"_id":"public/JVM/JVM运行时数据区域/image.png","hash":"7a4296336244d0bbdbc0dc107e62549162188e6e","modified":1519463300627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1519463300678}],"Category":[{"name":"JVM","_id":"cje157qe30004gf9k5idlsibd"},{"name":"spring","_id":"cje157qez000agf9kkj75sdzl"}],"Data":[],"Page":[{"layout":"page","title":"关于","_content":"\n### 李鑫\n#### 2011年参加工作,曾就职于豆丁网\n#### 目前就职于58同城,从事后台研发工作。\n","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\n---\n\n### 李鑫\n#### 2011年参加工作,曾就职于豆丁网\n#### 目前就职于58同城,从事后台研发工作。\n","date":"2018-02-24T06:17:01.000Z","updated":"2018-02-24T06:17:01.000Z","path":"about/index.html","comments":1,"_id":"cje157qdp0001gf9k1g4hlutc","content":"<h3 id=\"李鑫\"><a href=\"#李鑫\" class=\"headerlink\" title=\"李鑫\"></a>李鑫</h3><h4 id=\"2011年参加工作-曾就职于豆丁网\"><a href=\"#2011年参加工作-曾就职于豆丁网\" class=\"headerlink\" title=\"2011年参加工作,曾就职于豆丁网\"></a>2011年参加工作,曾就职于豆丁网</h4><h4 id=\"目前就职于58同城-从事后台研发工作。\"><a href=\"#目前就职于58同城-从事后台研发工作。\" class=\"headerlink\" title=\"目前就职于58同城,从事后台研发工作。\"></a>目前就职于58同城,从事后台研发工作。</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"李鑫\"><a href=\"#李鑫\" class=\"headerlink\" title=\"李鑫\"></a>李鑫</h3><h4 id=\"2011年参加工作-曾就职于豆丁网\"><a href=\"#2011年参加工作-曾就职于豆丁网\" class=\"headerlink\" title=\"2011年参加工作,曾就职于豆丁网\"></a>2011年参加工作,曾就职于豆丁网</h4><h4 id=\"目前就职于58同城-从事后台研发工作。\"><a href=\"#目前就职于58同城-从事后台研发工作。\" class=\"headerlink\" title=\"目前就职于58同城,从事后台研发工作。\"></a>目前就职于58同城,从事后台研发工作。</h4>"},{"title":"分类","type":"categories","date":"2018-02-24T06:38:03.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2018-02-24 14:38:03\ncomments: false\n---\n","updated":"2018-02-24T06:45:55.000Z","path":"categories/index.html","layout":"page","_id":"cje157qdt0003gf9kvpikkj6c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","date":"2018-02-24T06:37:38.000Z","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ndate: 2018-02-24 14:37:38\ncomments: false\n---\n","updated":"2018-02-24T06:45:46.000Z","path":"tags/index.html","layout":"page","_id":"cje157qe80007gf9kdvijujwz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JVM运行时数据区域","date":"2018-02-24T06:55:30.000Z","_content":"\njava虚拟机在执行java程序的过程中会把它所管理的内存划分为**若干个不同的数据区域**。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着**虚拟机进程**的启动而存在，有些区域则依赖**用户线程**的启动和结束而建立和销毁。\n<!-- more -->\n\n![JVM运行时数据区](JVM运行时数据区域/image.png)\n\n#### 程序计数器\n程序计数器（Program Counter Register）是**线程私有**的。是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的**概念模型**里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\n\n#### java虚拟机栈\n虚拟机栈（Java Virtual Machine Stacks）是**线程私有**的。java虚拟机栈是描述java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用来存储**局部变量表**、**操作数栈**、**动态链接**、**方法出口**等信息。每一个方法的调用直至执行完成，都对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通常所说的“堆”中存储“栈”中运行中的“栈”指的就是虚拟机栈，或者说是虚拟机栈中的**局部变量表**。\n>*局部变量表*：存放了编译期可知的各种**基本类型**（其中64位长度的long和double类型会占用2个局部变量空间（Slot））、**对象引用**和**returnAddress类型**。\n\n*规定的异常*：\n- StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。\n- OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。\n\n#### 本地方法栈\n本地方法栈（Native Method Stack）与虚拟机栈的作用相似，它们的区别为虚拟机栈为虚拟机执行java方法服务，面本地方法栈则为虚拟机使用到的Native方法服务。\n在虚拟机规范中没有对本地方法栈的使用语言、使用方式、数据结构作强制规定，都由具体的虚拟机自由实现。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。\n*规定的异常*：\n- StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。\n- OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。\n\n#### Java堆\nJava堆（Java Heap）是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存的唯一目的就是存入对象实例，*几乎*所有的对象实例都在这里分配内存。\nJava堆是垃圾收集器管理的主要区域。从内存回收角度来看，Java堆还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。可以设置固定大小也可以是可扩展的，可以通过参数 **-Xmx**和**-Xms**来控制。\n*规定的异常*：\n- OutOfMemoryError：当在堆中没有完成实例分配，并且堆也无法再扩展时抛出。\n\n#### 方法区\n方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。从JDK1.7的HotSpot中，已经把原本放在方法区中的字符串常量池移出。从JDK1.8 HotSpot JVM开始使用本地化的内存存放类的元数据，这个空间叫做元空间（Metaspace）这部分可参考文章： [JAVA 8 ：从永久区（PermGen）到元空间（Metaspace）](http://caoyaojun1988-163-com.iteye.com/blog/1969853)\n\n#### 运行时常量池\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table）,用于存放编译期生成的各种字面量和符号引用。","source":"_posts/JVM运行时数据区域.md","raw":"---\ntitle: JVM运行时数据区域\ndate: 2018-02-24 14:55:30\ntags: \n- JVM\n- 运行时区域\ncategories:\n- JVM\n---\n\njava虚拟机在执行java程序的过程中会把它所管理的内存划分为**若干个不同的数据区域**。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着**虚拟机进程**的启动而存在，有些区域则依赖**用户线程**的启动和结束而建立和销毁。\n<!-- more -->\n\n![JVM运行时数据区](JVM运行时数据区域/image.png)\n\n#### 程序计数器\n程序计数器（Program Counter Register）是**线程私有**的。是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的**概念模型**里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\n\n#### java虚拟机栈\n虚拟机栈（Java Virtual Machine Stacks）是**线程私有**的。java虚拟机栈是描述java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用来存储**局部变量表**、**操作数栈**、**动态链接**、**方法出口**等信息。每一个方法的调用直至执行完成，都对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通常所说的“堆”中存储“栈”中运行中的“栈”指的就是虚拟机栈，或者说是虚拟机栈中的**局部变量表**。\n>*局部变量表*：存放了编译期可知的各种**基本类型**（其中64位长度的long和double类型会占用2个局部变量空间（Slot））、**对象引用**和**returnAddress类型**。\n\n*规定的异常*：\n- StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。\n- OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。\n\n#### 本地方法栈\n本地方法栈（Native Method Stack）与虚拟机栈的作用相似，它们的区别为虚拟机栈为虚拟机执行java方法服务，面本地方法栈则为虚拟机使用到的Native方法服务。\n在虚拟机规范中没有对本地方法栈的使用语言、使用方式、数据结构作强制规定，都由具体的虚拟机自由实现。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。\n*规定的异常*：\n- StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。\n- OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。\n\n#### Java堆\nJava堆（Java Heap）是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存的唯一目的就是存入对象实例，*几乎*所有的对象实例都在这里分配内存。\nJava堆是垃圾收集器管理的主要区域。从内存回收角度来看，Java堆还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。可以设置固定大小也可以是可扩展的，可以通过参数 **-Xmx**和**-Xms**来控制。\n*规定的异常*：\n- OutOfMemoryError：当在堆中没有完成实例分配，并且堆也无法再扩展时抛出。\n\n#### 方法区\n方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。从JDK1.7的HotSpot中，已经把原本放在方法区中的字符串常量池移出。从JDK1.8 HotSpot JVM开始使用本地化的内存存放类的元数据，这个空间叫做元空间（Metaspace）这部分可参考文章： [JAVA 8 ：从永久区（PermGen）到元空间（Metaspace）](http://caoyaojun1988-163-com.iteye.com/blog/1969853)\n\n#### 运行时常量池\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table）,用于存放编译期生成的各种字面量和符号引用。","slug":"JVM运行时数据区域","published":1,"updated":"2018-02-24T07:00:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje157qdg0000gf9kzfdexk4z","content":"<p>java虚拟机在执行java程序的过程中会把它所管理的内存划分为<strong>若干个不同的数据区域</strong>。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着<strong>虚拟机进程</strong>的启动而存在，有些区域则依赖<strong>用户线程</strong>的启动和结束而建立和销毁。<br><a id=\"more\"></a></p>\n<p><img src=\"/JVM/JVM运行时数据区域/image.png\" alt=\"JVM运行时数据区\"></p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是<strong>线程私有</strong>的。是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的<strong>概念模型</strong>里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>\n<h4 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h4><p>虚拟机栈（Java Virtual Machine Stacks）是<strong>线程私有</strong>的。java虚拟机栈是描述java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用来存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong>等信息。每一个方法的调用直至执行完成，都对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通常所说的“堆”中存储“栈”中运行中的“栈”指的就是虚拟机栈，或者说是虚拟机栈中的<strong>局部变量表</strong>。</p>\n<blockquote>\n<p><em>局部变量表</em>：存放了编译期可知的各种<strong>基本类型</strong>（其中64位长度的long和double类型会占用2个局部变量空间（Slot））、<strong>对象引用</strong>和<strong>returnAddress类型</strong>。</p>\n</blockquote>\n<p><em>规定的异常</em>：</p>\n<ul>\n<li>StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。</li>\n<li>OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。</li>\n</ul>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈（Native Method Stack）与虚拟机栈的作用相似，它们的区别为虚拟机栈为虚拟机执行java方法服务，面本地方法栈则为虚拟机使用到的Native方法服务。<br>在虚拟机规范中没有对本地方法栈的使用语言、使用方式、数据结构作强制规定，都由具体的虚拟机自由实现。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。<br><em>规定的异常</em>：</p>\n<ul>\n<li>StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。</li>\n<li>OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。</li>\n</ul>\n<h4 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h4><p>Java堆（Java Heap）是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存的唯一目的就是存入对象实例，<em>几乎</em>所有的对象实例都在这里分配内存。<br>Java堆是垃圾收集器管理的主要区域。从内存回收角度来看，Java堆还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。<br>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。可以设置固定大小也可以是可扩展的，可以通过参数 <strong>-Xmx</strong>和<strong>-Xms</strong>来控制。<br><em>规定的异常</em>：</p>\n<ul>\n<li>OutOfMemoryError：当在堆中没有完成实例分配，并且堆也无法再扩展时抛出。</li>\n</ul>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。从JDK1.7的HotSpot中，已经把原本放在方法区中的字符串常量池移出。从JDK1.8 HotSpot JVM开始使用本地化的内存存放类的元数据，这个空间叫做元空间（Metaspace）这部分可参考文章： <a href=\"http://caoyaojun1988-163-com.iteye.com/blog/1969853\" target=\"_blank\" rel=\"noopener\">JAVA 8 ：从永久区（PermGen）到元空间（Metaspace）</a></p>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table）,用于存放编译期生成的各种字面量和符号引用。</p>\n","site":{"data":{}},"excerpt":"<p>java虚拟机在执行java程序的过程中会把它所管理的内存划分为<strong>若干个不同的数据区域</strong>。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着<strong>虚拟机进程</strong>的启动而存在，有些区域则依赖<strong>用户线程</strong>的启动和结束而建立和销毁。<br></p>","more":"<p></p>\n<p><img src=\"/JVM/JVM运行时数据区域/image.png\" alt=\"JVM运行时数据区\"></p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是<strong>线程私有</strong>的。是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的<strong>概念模型</strong>里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>\n<h4 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h4><p>虚拟机栈（Java Virtual Machine Stacks）是<strong>线程私有</strong>的。java虚拟机栈是描述java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用来存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong>等信息。每一个方法的调用直至执行完成，都对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通常所说的“堆”中存储“栈”中运行中的“栈”指的就是虚拟机栈，或者说是虚拟机栈中的<strong>局部变量表</strong>。</p>\n<blockquote>\n<p><em>局部变量表</em>：存放了编译期可知的各种<strong>基本类型</strong>（其中64位长度的long和double类型会占用2个局部变量空间（Slot））、<strong>对象引用</strong>和<strong>returnAddress类型</strong>。</p>\n</blockquote>\n<p><em>规定的异常</em>：</p>\n<ul>\n<li>StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。</li>\n<li>OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。</li>\n</ul>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈（Native Method Stack）与虚拟机栈的作用相似，它们的区别为虚拟机栈为虚拟机执行java方法服务，面本地方法栈则为虚拟机使用到的Native方法服务。<br>在虚拟机规范中没有对本地方法栈的使用语言、使用方式、数据结构作强制规定，都由具体的虚拟机自由实现。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。<br><em>规定的异常</em>：</p>\n<ul>\n<li>StackOverflowError：当线程请求的栈深度大于虚拟机所允许的深度时抛出。</li>\n<li>OutOfMemoryError：当虚拟机栈进行动态扩展时无法申请到足够的内存空间时抛出。</li>\n</ul>\n<h4 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h4><p>Java堆（Java Heap）是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存的唯一目的就是存入对象实例，<em>几乎</em>所有的对象实例都在这里分配内存。<br>Java堆是垃圾收集器管理的主要区域。从内存回收角度来看，Java堆还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。<br>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。可以设置固定大小也可以是可扩展的，可以通过参数 <strong>-Xmx</strong>和<strong>-Xms</strong>来控制。<br><em>规定的异常</em>：</p>\n<ul>\n<li>OutOfMemoryError：当在堆中没有完成实例分配，并且堆也无法再扩展时抛出。</li>\n</ul>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。从JDK1.7的HotSpot中，已经把原本放在方法区中的字符串常量池移出。从JDK1.8 HotSpot JVM开始使用本地化的内存存放类的元数据，这个空间叫做元空间（Metaspace）这部分可参考文章： <a href=\"http://caoyaojun1988-163-com.iteye.com/blog/1969853\" target=\"_blank\" rel=\"noopener\">JAVA 8 ：从永久区（PermGen）到元空间（Metaspace）</a></p>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table）,用于存放编译期生成的各种字面量和符号引用。</p>"},{"title":"spring security 入门教程","date":"2018-02-24T04:31:03.000Z","comments":1,"toc":true,"_content":"\n本篇文章只作为spring security入门使用，具体深入内容请自行查询相关资料。\n<!-- more -->\n\n# spring security简介\n Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。当前版本为4.2.3。\n# 接入方式\nSpring Security的接入方式一共有两种：基于注解方式和基于xml配置方式。下面对两种接入方式作一下介绍。\n首先是spring security依赖引入\npom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>demo.security</groupId>\n    <artifactId>security</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <properties>\n        <!-- spring版本号 -->\n        <spring.version>4.1.6.RELEASE</spring.version>\n        <security.version>4.0.1.RELEASE</security.version>\n        <!-- log4j日志文件管理包版本 -->\n        <slf4j.version>1.7.7</slf4j.version>\n        <log4j.version>1.2.17</log4j.version>\n\n    </properties>\n\n    <dependencies>\n    <!-- springframework -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-oxm</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-jdbc</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aop</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context-support</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-test</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-core</artifactId>\n        <version>${security.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-config</artifactId>\n        <version>${security.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-taglibs</artifactId>\n        <version>${security.version}</version>\n    </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.0-alpha-1</version>\n            <scope>provided</scope>\n        </dependency>\n        <!-- 导入Mysql数据库链接jar包 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.30</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <finalName>ROOT</finalName>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n            <resource>\n                <directory>config/${env}</directory>\n            </resource>\n            <resource>\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n        </resources>\n    </build>\n\n        </project>\n```\n这里使用的是servlet3.0，自servlet3.0+规范后，允许servlet，filter，listener不必声明在web.xml中，而是以硬编码的方式存在，实现容器的零配置。\n## 基于注解方式\n第一步是要创建Spring Security的Java 配置类。\n创建类SecurityConfiguration继承WebSecurityConfigurerAdapter，来对我们应用中所有的安全相关的事项（所有url，验证用户名密码，表单重定向等）进行控制。\n\nSecurityConfiguration.java\n```\npackage com.security.code;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\nimport javax.sql.DataSource;\n\n/**\n * <li>security config</li>\n *\n * @author lixin\n * @create 17/3/22\n */\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter{\n\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        \n    }\n\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        \n    }\n\n    /**\n     * 拦截请求\n     * @param web\n     * @throws Exception\n     */\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n\t}\n}\n```\nWebSecurityConfigurerAdapter共有三个configure方法。\n```\nconfigure(WebSecurity) 通过重载，配置Spring Security的Filter链\nconfigure(HttpSecurity) 通过重载，配置如何通过拦截器保护请求\nconfigure(AuthenticationManagerBuilder) 通过重载，配置user-detail服务\n```\n@EnableWebSecurity 注解将会启用Web安全功能。\n\n第二步是初始化springSecurityFilter注册类，这里使用的方法是继承类AbstractSecurityWebApplicationInitializer\n```\npackage com.security.code;\n\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * <li>注册springSecurityFilter</li>\n *\n * @author lixin\n * @create 17/3/22\n */\npublic class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer\n{\n}\n```\n这里可以没有任何实现。至此，基于注解方式的接入就完成了。下面介绍一下基于xml配置方式的接入。\n\n## 基于xml配置方式接入\n第一步，在web.xml加入配置\n```\n<filter>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n第二步，增加spring-security.xml，并引入到application.xml内\n\nspring-security.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:security=\"http://www.springframework.org/schema/security\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/security\n           http://www.springframework.org/schema/security/spring-security.xsd\">\n\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        ...\n    </security:http>\n\n    <security:authentication-manager>\n        ..\n    </security:authentication-manager>\n\n</beans>\n```\n具体配置后续会添加。基于xml配置方式就这么多，下面介绍一下用户的存储认证方式。\n\n# 用户存储认证方式\nspring security关于用户存储认证方面是非常灵活的，能够基于各种数据存储来认证用户。它内置了多种常见的用户存储场景，下面对各种场景进行下介绍。\n\n## 使用基于内存的用户存储\n从名称上可以知道这种方式是将用户名、密码、权限等数据存储在内存中，一般个人开发测试可以使用这种方式。\n\n注解编码方式：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //基于内存的用户存储、认证\n        auth.inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin\").roles(\"ADMIN\",\"USER\")\n                .and()\n                .withUser(\"user\").password(\"user\").roles(\"USER\");\n    }\n```\n代码里通过方法auth.inMemoryAuthentication()获取AuthenticationManagerBuilder对象，并设置了两个用户admin和user同时设置对应密码和所拥有的权限。\n\n这里需要注意的是，roles()方法是authorities()方法的简写形式。roles()方法所给定的值都会加一个\"ROLE_\"前缀，并将其作为权限授予用户。实际上，如下用户配置与上面程序是一样的。\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n         //基于内存的用户存储、认证\n        auth.inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin\").authorities(\"ROLE_AMIN\",\"ROLE_USER\")\n                .and()\n                .withUser(\"user\").password(\"user\").authorities(\"ROLE_USER\");\n\n    }\n```\n除了上面的方法还有一些其它方法可以配置用户的详细信息。\n```\naccountExpired(boolean) 定义账号是否已经过期\naccountLocked(boolean) 定义账号是否已经锁定\nand() 用来连接配置\nauthorities(GrantedAuthority...) 授予某个用户一项或多项权限\nauthorities(List<? extends GrantedAuthority>) 授予某个用户一项或多项权限\nauthorities(String...) 授予某个用户一项或多项权限\ncredentialsExpired(boolean) 定义凭证是否已经过期\ndisabled(boolean) 定义账号是否已被禁用\npassword(String) 定义用户的密码\nroles(String...) 授予某个用户一项或多项角色\n```\nxml配置方式：\n```\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"admin\" authorities=\"ROLE_ADMIN\" password=\"admin\"/>\n                <security:user name=\"user\" authorities=\"ROLE_USER\" password=\"user\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n## 基于数据库表用户存储认证\n通常我们都会将用户数据存储在关系型数据库中，并通过jdbc进行访问。spring security使用以jdbc为支撑的用户存储，我们可以使用下面的方式进行配置。\n\n基于注解编码方式：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //基于数据库的用户存储、认证\n        auth.jdbcAuthentication().dataSource(dataSource)\n                .usersByUsernameQuery(\"select account,password,true from user where account=?\")\n                .authoritiesByUsernameQuery(\"select account,role from user where account=?\")；\n    }\n```\n第一个查询语句获取了用户的基本信息，第二个查询语句获取了用户权限数据。\n\n基于xml配置方式：\n```\n<security:authentication-manager>\n        <security:authentication-provider>\n            <security:jdbc-user-service data-source-ref=\"dataSource\"\n                                        authorities-by-username-query=\"select account,role from user where account=?\"\n                                        users-by-username-query=\"select account,password,true from user where account=?\"/>\n            <security:password-encoder ref=\"bcryptEncoder\"/>\n    </security:authentication-manager>\n```\n## 基于LDAP进行用户存储认证\n这种方式没有进行测试，如果感兴趣可以自行测试。\n\n## 配置自定义的用户存储认证\n这种方式更为灵活，更适合在生产环境使用。这种方式不在局限于存储环境。自定义的方式也很简单。只需要提供一个UserDetailService接口实现即可。\n```\npackage com.blog.admin.security;\n\nimport com.blog.admin.dao.UserDao;\nimport db.model.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n/**\n * <li></li>\n *\n * @author lixin\n * @create 17/3/20\n */\n@Service\npublic class BlogSecurityUserDetailsService implements UserDetailsService{\n\n    @Autowired\n    private UserDao userDao;\n\n    /**\n     * 校验用户\n     * @param username\n     * @return\n     * @throws UsernameNotFoundException\n     */\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        User user = userDao.queryByUserName(username);\n        if(user == null)throw new UsernameNotFoundException(\"user not found\");\n\n        return new org.springframework.security.core.userdetails.User(user.getAccount(),user.getPassword(),userDao.getUserGrantedAuthoritys(user.getId()));\n    }\n}\n```\n自定义的方式只要实现接口方法loadUserByUsername（String username）即可，返回代表用户的UserDetails对象。调用方式也很简单：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //自定义方式\n        auth.userDetailsService(securityUserDetailsService);\n    }\n```\n基于xml方式：\n```\n    <security:authentication-manager>\n        <security:authentication-provider user-service-ref=\"blogUserDetailService\">\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n# 密码加密策略\n通常我们在存储密码的时候都是进行加密的，spring security默认提供了三种密码存储方式，同时也可以使用自定义的加密方式：\n\n- NoOpPasswordEncoder      明文方式保存\n- BCtPasswordEncoder       强hash方式加密\n- StandardPasswordEncoder  SHA-256方式加密\n- 实现PasswordEncoder接口       自定义加密方式\n注解编码方式：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //基于数据库的用户存储、认证\n        auth.jdbcAuthentication().dataSource(dataSource)\n                .usersByUsernameQuery(\"select account,password,true from user where account=?\")\n                .authoritiesByUsernameQuery(\"select account,role from user where account=?\")\n                .passwordEncoder(NoOpPasswordEncoder.getInstance());\n    }\n```\n通过方法passwordEncoder传入对应的加密实例即可。\n\nxml配置方式：\n```\n<security:authentication-manager>\n        <security:authentication-provider>\n            <security:jdbc-user-service data-source-ref=\"dataSource\"\n                                        authorities-by-username-query=\"select account,role from user where account=?\"\n                                        users-by-username-query=\"select account,password,true from user where account=?\"/>\n            <security:password-encoder ref=\"bcryptEncoder\"/>\n        </security:authentication-provider>\n    </security:authentication-manager>\n\n    <bean id=\"bcryptEncoder\" class=\"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\"/>\n```\n# 请求拦截策略\n下面开始介绍一下spring security的重要功能，请求拦截策略。spring security的请求拦截匹配有两种风格，ant风格和正则表达式风格。编码方式是通过重载configure(HttpSecurity)方法实现。\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\");\n    }\n```\n上面使用的是ant风格的匹配，可以通过http.regexMatcher()方法使用正则表达式风格。\n\n对应的xml配置方式：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\"/>\n    </security:http>\n```\n除了上面的请求保护方法外，还有一些方法能够用来定义如何保护请求。\n```\naccess(String)     如果给定的SpEL表达式计算结果为true，就允许访问\nanonymous()        允许匿名用户访问\nauthenticated()    允许认证过的用户访问\ndenyAll()          无条件拒绝所有访问\nfullyAuthenticated()   如果用户是完整认证的话（不是通过Remember-me功能认证的），就允许访问\nhasAnyAuthority(String...)   如果用户具备给定权限中的某一个的话，就允许访问\nhasAnyRole(String...)   如果用户具备给定角色中的某一个的话，就允许访问\nhasAuthority(String)   如果用户具备给定权限的话，就允许访问\nhasIpAddress(String)   如果请求来自给定IP地址的话，就允许访问\nhasRole(String)   如果用户具备给定角色的话，就允许访问\nnot()   对其他访问方法的结果求反\npermitAll()   无条件允许访问\nrememberMe()   如果用户是通过Remember-me功能认证的，就允许访问\n```\n# 强制安全性通道\n通常我们都是使用http发送数据，这种方式是不安全的。对于敏感信息我们通常都是通过https进行加密发送。spring security对于安全性通道也提供了一种方式。我们可以在配置中添加requiresChannel()方法使url强制使用https。\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and()\n                .requiresChannel().antMatchers(\"/admin/info\").requiresSecure();\n    }\n```\n不论何时，只要是对“/admin/info”的请求，spring security都认为需要安全性通道，并自动将请求重定向到https上。\n\n与之相反，如果有些请求不需要https传送，可以使用requiresInsecure()替代requiresSecure()，将请求声明为始终使用http传送。\n\n对应xml配置：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n        <security:intercept-url pattern=\"/admin/info\" access=\"hasRole('ROLE_ADMIN')\" requires-channel=\"https\"/>\n    </security:http>\n```\n# 防止CSRF\nspring security从版本3.2开始，默认就会启用CSRF防护。spring security通过一个同步token的方式来实现CSRF防护功能。它会拦截状态变化的请求，并检查CSRF token。如果请求中不包含CSRF token的话，或者token不能与服务器端的token匹配，请求就会失败，并抛出CsrfException异常。\n\n如果使用JSP作为页面模板的话，需要作的非常简单。\n```\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n```\n这样就spring security就会自动生成csrf token。如果想关闭csrf防护，需要作的也很简单，只需要调用一下csrf().disable();即可。\n\n   编码方式：\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and().csrf().disable();\n    }\n```\n对应xml方式：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:csrf disabled=\"true\" />\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n    </security:http>\n```\n# remember-me功能\nremember-me是一个很重要的功能，用户肯定不希望每次都输入用户名密码进行登录。spring security提供的remember-me功能使用起来非常简单。启用这个功能只需要调用rememberMe()方法即可。\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and().rememberMe().key(\"abc\").rememberMeParameter(\"remember_me\").rememberMeCookieName(\"my-remember-me\").tokenValiditySeconds(86400)；\n    }\n```\n同时可以设置参数名称，cookie的name和过期时间。对应的xml配置：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:remember-me />\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n    </security:http>\n```\nremember-me有多种参数可以选择配置。\n\n这里有个需要注意的地方 ，在登录页面内的remember-me的input标签内不要设置value的值，否则remember-me功能将不会生效。\n\n# 自定义登录页面\nspring security会提供一个默认的登录页面，如果你想使用自己的登录页面，可以这样设置。\n\n编码方式：\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and().formLogin()\n                .loginPage(\"/login\").usernameParameter(\"username\").passwordParameter(\"password\")\n                .and().exceptionHandling().accessDeniedPage(\"/loginfail\");\n    }\n```\n通过formLogin()方法来设置使用自定义登录页面，loginPage是登录页面地址，accessDeniePage登录失败跳转地址。\n\n对应的xml配置：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n        <security:form-login login-page=\"/login\"\n                             username-parameter=\"username\"\n                             password-parameter=\"password\"\n                             authentication-failure-url=\"/loginfail\"\n                             default-target-url=\"/\"/>\n    </security:http>\n ```\n\n到此spring security的一些常用功能就介绍完了，写的比较粗糙，可能会存在一些错误。欢迎大家反馈交流。","source":"_posts/spring-security-入门教程.md","raw":"---\ntitle: spring security 入门教程\ndate: 2018-02-24 12:31:03\ncomments: true\ntoc: true\ncategories: \n - spring\ntags: \n - spring \n - security\n - spring\n - 安全\n - 权限控制\n---\n\n本篇文章只作为spring security入门使用，具体深入内容请自行查询相关资料。\n<!-- more -->\n\n# spring security简介\n Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。当前版本为4.2.3。\n# 接入方式\nSpring Security的接入方式一共有两种：基于注解方式和基于xml配置方式。下面对两种接入方式作一下介绍。\n首先是spring security依赖引入\npom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>demo.security</groupId>\n    <artifactId>security</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <properties>\n        <!-- spring版本号 -->\n        <spring.version>4.1.6.RELEASE</spring.version>\n        <security.version>4.0.1.RELEASE</security.version>\n        <!-- log4j日志文件管理包版本 -->\n        <slf4j.version>1.7.7</slf4j.version>\n        <log4j.version>1.2.17</log4j.version>\n\n    </properties>\n\n    <dependencies>\n    <!-- springframework -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-oxm</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-jdbc</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aop</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context-support</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-test</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-core</artifactId>\n        <version>${security.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-config</artifactId>\n        <version>${security.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-taglibs</artifactId>\n        <version>${security.version}</version>\n    </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.0-alpha-1</version>\n            <scope>provided</scope>\n        </dependency>\n        <!-- 导入Mysql数据库链接jar包 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.30</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <finalName>ROOT</finalName>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n            <resource>\n                <directory>config/${env}</directory>\n            </resource>\n            <resource>\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n        </resources>\n    </build>\n\n        </project>\n```\n这里使用的是servlet3.0，自servlet3.0+规范后，允许servlet，filter，listener不必声明在web.xml中，而是以硬编码的方式存在，实现容器的零配置。\n## 基于注解方式\n第一步是要创建Spring Security的Java 配置类。\n创建类SecurityConfiguration继承WebSecurityConfigurerAdapter，来对我们应用中所有的安全相关的事项（所有url，验证用户名密码，表单重定向等）进行控制。\n\nSecurityConfiguration.java\n```\npackage com.security.code;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\nimport javax.sql.DataSource;\n\n/**\n * <li>security config</li>\n *\n * @author lixin\n * @create 17/3/22\n */\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter{\n\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        \n    }\n\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        \n    }\n\n    /**\n     * 拦截请求\n     * @param web\n     * @throws Exception\n     */\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n\t}\n}\n```\nWebSecurityConfigurerAdapter共有三个configure方法。\n```\nconfigure(WebSecurity) 通过重载，配置Spring Security的Filter链\nconfigure(HttpSecurity) 通过重载，配置如何通过拦截器保护请求\nconfigure(AuthenticationManagerBuilder) 通过重载，配置user-detail服务\n```\n@EnableWebSecurity 注解将会启用Web安全功能。\n\n第二步是初始化springSecurityFilter注册类，这里使用的方法是继承类AbstractSecurityWebApplicationInitializer\n```\npackage com.security.code;\n\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * <li>注册springSecurityFilter</li>\n *\n * @author lixin\n * @create 17/3/22\n */\npublic class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer\n{\n}\n```\n这里可以没有任何实现。至此，基于注解方式的接入就完成了。下面介绍一下基于xml配置方式的接入。\n\n## 基于xml配置方式接入\n第一步，在web.xml加入配置\n```\n<filter>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n第二步，增加spring-security.xml，并引入到application.xml内\n\nspring-security.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:security=\"http://www.springframework.org/schema/security\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/security\n           http://www.springframework.org/schema/security/spring-security.xsd\">\n\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        ...\n    </security:http>\n\n    <security:authentication-manager>\n        ..\n    </security:authentication-manager>\n\n</beans>\n```\n具体配置后续会添加。基于xml配置方式就这么多，下面介绍一下用户的存储认证方式。\n\n# 用户存储认证方式\nspring security关于用户存储认证方面是非常灵活的，能够基于各种数据存储来认证用户。它内置了多种常见的用户存储场景，下面对各种场景进行下介绍。\n\n## 使用基于内存的用户存储\n从名称上可以知道这种方式是将用户名、密码、权限等数据存储在内存中，一般个人开发测试可以使用这种方式。\n\n注解编码方式：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //基于内存的用户存储、认证\n        auth.inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin\").roles(\"ADMIN\",\"USER\")\n                .and()\n                .withUser(\"user\").password(\"user\").roles(\"USER\");\n    }\n```\n代码里通过方法auth.inMemoryAuthentication()获取AuthenticationManagerBuilder对象，并设置了两个用户admin和user同时设置对应密码和所拥有的权限。\n\n这里需要注意的是，roles()方法是authorities()方法的简写形式。roles()方法所给定的值都会加一个\"ROLE_\"前缀，并将其作为权限授予用户。实际上，如下用户配置与上面程序是一样的。\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n         //基于内存的用户存储、认证\n        auth.inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin\").authorities(\"ROLE_AMIN\",\"ROLE_USER\")\n                .and()\n                .withUser(\"user\").password(\"user\").authorities(\"ROLE_USER\");\n\n    }\n```\n除了上面的方法还有一些其它方法可以配置用户的详细信息。\n```\naccountExpired(boolean) 定义账号是否已经过期\naccountLocked(boolean) 定义账号是否已经锁定\nand() 用来连接配置\nauthorities(GrantedAuthority...) 授予某个用户一项或多项权限\nauthorities(List<? extends GrantedAuthority>) 授予某个用户一项或多项权限\nauthorities(String...) 授予某个用户一项或多项权限\ncredentialsExpired(boolean) 定义凭证是否已经过期\ndisabled(boolean) 定义账号是否已被禁用\npassword(String) 定义用户的密码\nroles(String...) 授予某个用户一项或多项角色\n```\nxml配置方式：\n```\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"admin\" authorities=\"ROLE_ADMIN\" password=\"admin\"/>\n                <security:user name=\"user\" authorities=\"ROLE_USER\" password=\"user\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n## 基于数据库表用户存储认证\n通常我们都会将用户数据存储在关系型数据库中，并通过jdbc进行访问。spring security使用以jdbc为支撑的用户存储，我们可以使用下面的方式进行配置。\n\n基于注解编码方式：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //基于数据库的用户存储、认证\n        auth.jdbcAuthentication().dataSource(dataSource)\n                .usersByUsernameQuery(\"select account,password,true from user where account=?\")\n                .authoritiesByUsernameQuery(\"select account,role from user where account=?\")；\n    }\n```\n第一个查询语句获取了用户的基本信息，第二个查询语句获取了用户权限数据。\n\n基于xml配置方式：\n```\n<security:authentication-manager>\n        <security:authentication-provider>\n            <security:jdbc-user-service data-source-ref=\"dataSource\"\n                                        authorities-by-username-query=\"select account,role from user where account=?\"\n                                        users-by-username-query=\"select account,password,true from user where account=?\"/>\n            <security:password-encoder ref=\"bcryptEncoder\"/>\n    </security:authentication-manager>\n```\n## 基于LDAP进行用户存储认证\n这种方式没有进行测试，如果感兴趣可以自行测试。\n\n## 配置自定义的用户存储认证\n这种方式更为灵活，更适合在生产环境使用。这种方式不在局限于存储环境。自定义的方式也很简单。只需要提供一个UserDetailService接口实现即可。\n```\npackage com.blog.admin.security;\n\nimport com.blog.admin.dao.UserDao;\nimport db.model.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n/**\n * <li></li>\n *\n * @author lixin\n * @create 17/3/20\n */\n@Service\npublic class BlogSecurityUserDetailsService implements UserDetailsService{\n\n    @Autowired\n    private UserDao userDao;\n\n    /**\n     * 校验用户\n     * @param username\n     * @return\n     * @throws UsernameNotFoundException\n     */\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        User user = userDao.queryByUserName(username);\n        if(user == null)throw new UsernameNotFoundException(\"user not found\");\n\n        return new org.springframework.security.core.userdetails.User(user.getAccount(),user.getPassword(),userDao.getUserGrantedAuthoritys(user.getId()));\n    }\n}\n```\n自定义的方式只要实现接口方法loadUserByUsername（String username）即可，返回代表用户的UserDetails对象。调用方式也很简单：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //自定义方式\n        auth.userDetailsService(securityUserDetailsService);\n    }\n```\n基于xml方式：\n```\n    <security:authentication-manager>\n        <security:authentication-provider user-service-ref=\"blogUserDetailService\">\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n# 密码加密策略\n通常我们在存储密码的时候都是进行加密的，spring security默认提供了三种密码存储方式，同时也可以使用自定义的加密方式：\n\n- NoOpPasswordEncoder      明文方式保存\n- BCtPasswordEncoder       强hash方式加密\n- StandardPasswordEncoder  SHA-256方式加密\n- 实现PasswordEncoder接口       自定义加密方式\n注解编码方式：\n```\n    /**\n     * 配置user-detail服务\n     * @param auth\n     * @throws Exception\n     */\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)throws Exception{\n        //基于数据库的用户存储、认证\n        auth.jdbcAuthentication().dataSource(dataSource)\n                .usersByUsernameQuery(\"select account,password,true from user where account=?\")\n                .authoritiesByUsernameQuery(\"select account,role from user where account=?\")\n                .passwordEncoder(NoOpPasswordEncoder.getInstance());\n    }\n```\n通过方法passwordEncoder传入对应的加密实例即可。\n\nxml配置方式：\n```\n<security:authentication-manager>\n        <security:authentication-provider>\n            <security:jdbc-user-service data-source-ref=\"dataSource\"\n                                        authorities-by-username-query=\"select account,role from user where account=?\"\n                                        users-by-username-query=\"select account,password,true from user where account=?\"/>\n            <security:password-encoder ref=\"bcryptEncoder\"/>\n        </security:authentication-provider>\n    </security:authentication-manager>\n\n    <bean id=\"bcryptEncoder\" class=\"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\"/>\n```\n# 请求拦截策略\n下面开始介绍一下spring security的重要功能，请求拦截策略。spring security的请求拦截匹配有两种风格，ant风格和正则表达式风格。编码方式是通过重载configure(HttpSecurity)方法实现。\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\");\n    }\n```\n上面使用的是ant风格的匹配，可以通过http.regexMatcher()方法使用正则表达式风格。\n\n对应的xml配置方式：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\"/>\n    </security:http>\n```\n除了上面的请求保护方法外，还有一些方法能够用来定义如何保护请求。\n```\naccess(String)     如果给定的SpEL表达式计算结果为true，就允许访问\nanonymous()        允许匿名用户访问\nauthenticated()    允许认证过的用户访问\ndenyAll()          无条件拒绝所有访问\nfullyAuthenticated()   如果用户是完整认证的话（不是通过Remember-me功能认证的），就允许访问\nhasAnyAuthority(String...)   如果用户具备给定权限中的某一个的话，就允许访问\nhasAnyRole(String...)   如果用户具备给定角色中的某一个的话，就允许访问\nhasAuthority(String)   如果用户具备给定权限的话，就允许访问\nhasIpAddress(String)   如果请求来自给定IP地址的话，就允许访问\nhasRole(String)   如果用户具备给定角色的话，就允许访问\nnot()   对其他访问方法的结果求反\npermitAll()   无条件允许访问\nrememberMe()   如果用户是通过Remember-me功能认证的，就允许访问\n```\n# 强制安全性通道\n通常我们都是使用http发送数据，这种方式是不安全的。对于敏感信息我们通常都是通过https进行加密发送。spring security对于安全性通道也提供了一种方式。我们可以在配置中添加requiresChannel()方法使url强制使用https。\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and()\n                .requiresChannel().antMatchers(\"/admin/info\").requiresSecure();\n    }\n```\n不论何时，只要是对“/admin/info”的请求，spring security都认为需要安全性通道，并自动将请求重定向到https上。\n\n与之相反，如果有些请求不需要https传送，可以使用requiresInsecure()替代requiresSecure()，将请求声明为始终使用http传送。\n\n对应xml配置：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n        <security:intercept-url pattern=\"/admin/info\" access=\"hasRole('ROLE_ADMIN')\" requires-channel=\"https\"/>\n    </security:http>\n```\n# 防止CSRF\nspring security从版本3.2开始，默认就会启用CSRF防护。spring security通过一个同步token的方式来实现CSRF防护功能。它会拦截状态变化的请求，并检查CSRF token。如果请求中不包含CSRF token的话，或者token不能与服务器端的token匹配，请求就会失败，并抛出CsrfException异常。\n\n如果使用JSP作为页面模板的话，需要作的非常简单。\n```\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n```\n这样就spring security就会自动生成csrf token。如果想关闭csrf防护，需要作的也很简单，只需要调用一下csrf().disable();即可。\n\n   编码方式：\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and().csrf().disable();\n    }\n```\n对应xml方式：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:csrf disabled=\"true\" />\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n    </security:http>\n```\n# remember-me功能\nremember-me是一个很重要的功能，用户肯定不希望每次都输入用户名密码进行登录。spring security提供的remember-me功能使用起来非常简单。启用这个功能只需要调用rememberMe()方法即可。\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and().rememberMe().key(\"abc\").rememberMeParameter(\"remember_me\").rememberMeCookieName(\"my-remember-me\").tokenValiditySeconds(86400)；\n    }\n```\n同时可以设置参数名称，cookie的name和过期时间。对应的xml配置：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:remember-me />\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n    </security:http>\n```\nremember-me有多种参数可以选择配置。\n\n这里有个需要注意的地方 ，在登录页面内的remember-me的input标签内不要设置value的值，否则remember-me功能将不会生效。\n\n# 自定义登录页面\nspring security会提供一个默认的登录页面，如果你想使用自己的登录页面，可以这样设置。\n\n编码方式：\n```\n    /**\n     * 拦截请求\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    public void configure(HttpSecurity http)throws Exception{\n        http.authorizeRequests()\n                .antMatchers(\"/\",\"/css/**\",\"/js/**\").permitAll()   //任何人都可以访问\n                .antMatchers(\"/admin/**\").access(\"hasRole('ADMIN')\")     //持有user权限的用户可以访问\n                .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\")\n                .and().formLogin()\n                .loginPage(\"/login\").usernameParameter(\"username\").passwordParameter(\"password\")\n                .and().exceptionHandling().accessDeniedPage(\"/loginfail\");\n    }\n```\n通过formLogin()方法来设置使用自定义登录页面，loginPage是登录页面地址，accessDeniePage登录失败跳转地址。\n\n对应的xml配置：\n```\n    <security:http auto-config=\"true\" use-expressions=\"true\">\n        <security:intercept-url pattern=\"/admin/*\" access=\"hasRole('ROLE_ADMIN')\"/>\n        <security:intercept-url pattern=\"/user/*\" access=\"hasRole('ROLE_USER')\" />\n        <security:form-login login-page=\"/login\"\n                             username-parameter=\"username\"\n                             password-parameter=\"password\"\n                             authentication-failure-url=\"/loginfail\"\n                             default-target-url=\"/\"/>\n    </security:http>\n ```\n\n到此spring security的一些常用功能就介绍完了，写的比较粗糙，可能会存在一些错误。欢迎大家反馈交流。","slug":"spring-security-入门教程","published":1,"updated":"2018-02-24T07:01:16.000Z","layout":"post","photos":[],"link":"","_id":"cje157qdr0002gf9kgqn2yczu","content":"<p>本篇文章只作为spring security入门使用，具体深入内容请自行查询相关资料。<br><a id=\"more\"></a></p>\n<h1 id=\"spring-security简介\"><a href=\"#spring-security简介\" class=\"headerlink\" title=\"spring security简介\"></a>spring security简介</h1><p> Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。当前版本为4.2.3。</p>\n<h1 id=\"接入方式\"><a href=\"#接入方式\" class=\"headerlink\" title=\"接入方式\"></a>接入方式</h1><p>Spring Security的接入方式一共有两种：基于注解方式和基于xml配置方式。下面对两种接入方式作一下介绍。<br>首先是spring security依赖引入<br>pom.xml<br><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span></span><br><span class=\"line\"><span class=\"xml\">         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\"><span class=\"xml\">         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>demo.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- spring版本号 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">security.version</span>&gt;</span>4.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">security.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">log4j.version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">log4j.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!-- springframework --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-oxm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;security.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;security.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-taglibs<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;security.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0-alpha-1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.30<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>ROOT<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>config/$</span><span class=\"template-variable\">&#123;env&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>这里使用的是servlet3.0，自servlet3.0+规范后，允许servlet，filter，listener不必声明在web.xml中，而是以硬编码的方式存在，实现容器的零配置。</p>\n<h2 id=\"基于注解方式\"><a href=\"#基于注解方式\" class=\"headerlink\" title=\"基于注解方式\"></a>基于注解方式</h2><p>第一步是要创建Spring Security的Java 配置类。<br>创建类SecurityConfiguration继承WebSecurityConfigurerAdapter，来对我们应用中所有的安全相关的事项（所有url，验证用户名密码，表单重定向等）进行控制。</p>\n<p>SecurityConfiguration.java<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.security.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;li&gt;security config&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lixin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 17/3/22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\">AuthenticationManager <span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.<span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> http</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> web</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>WebSecurityConfigurerAdapter共有三个configure方法。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">configure</span><span class=\"params\">(WebSecurity)</span></span> 通过重载，配置Spring Security的Filter链</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configure</span><span class=\"params\">(HttpSecurity)</span></span> 通过重载，配置如何通过拦截器保护请求</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder)</span></span> 通过重载，配置user-detail服务</span><br></pre></td></tr></table></figure></p>\n<p>@EnableWebSecurity 注解将会启用Web安全功能。</p>\n<p>第二步是初始化springSecurityFilter注册类，这里使用的方法是继承类AbstractSecurityWebApplicationInitializer<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.security.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.context.<span class=\"type\">AbstractSecurityWebApplicationInitializer</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;li&gt;注册springSecurityFilter&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @author lixin</span></span><br><span class=\"line\"><span class=\"comment\"> * @create 17/3/22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityWebApplicationInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSecurityWebApplicationInitializer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里可以没有任何实现。至此，基于注解方式的接入就完成了。下面介绍一下基于xml配置方式的接入。</p>\n<h2 id=\"基于xml配置方式接入\"><a href=\"#基于xml配置方式接入\" class=\"headerlink\" title=\"基于xml配置方式接入\"></a>基于xml配置方式接入</h2><p>第一步，在web.xml加入配置<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">filter</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">filter</span>-name&gt;springSecurityFilterChain&lt;/<span class=\"built_in\">filter</span>-name&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">filter</span>-<span class=\"keyword\">class</span>&gt;org.springframework.web.<span class=\"built_in\">filter</span>.DelegatingFilterProxy&lt;/<span class=\"built_in\">filter</span>-<span class=\"keyword\">class</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"built_in\">filter</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"built_in\">filter</span>-mapping&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">filter</span>-name&gt;springSecurityFilterChain&lt;/<span class=\"built_in\">filter</span>-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">  &lt;/<span class=\"built_in\">filter</span>-mapping&gt;</span><br></pre></td></tr></table></figure></p>\n<p>第二步，增加spring-security.xml，并引入到application.xml内</p>\n<p>spring-security.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">           http://www.springframework.org/schema/security</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">           http://www.springframework.org/schema/security/spring-security.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">        ..</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>具体配置后续会添加。基于xml配置方式就这么多，下面介绍一下用户的存储认证方式。</p>\n<h1 id=\"用户存储认证方式\"><a href=\"#用户存储认证方式\" class=\"headerlink\" title=\"用户存储认证方式\"></a>用户存储认证方式</h1><p>spring security关于用户存储认证方面是非常灵活的，能够基于各种数据存储来认证用户。它内置了多种常见的用户存储场景，下面对各种场景进行下介绍。</p>\n<h2 id=\"使用基于内存的用户存储\"><a href=\"#使用基于内存的用户存储\" class=\"headerlink\" title=\"使用基于内存的用户存储\"></a>使用基于内存的用户存储</h2><p>从名称上可以知道这种方式是将用户名、密码、权限等数据存储在内存中，一般个人开发测试可以使用这种方式。</p>\n<p>注解编码方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">//基于内存的用户存储、认证</span></span><br><span class=\"line\">    <span class=\"selector-tag\">auth</span><span class=\"selector-class\">.inMemoryAuthentication</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.roles</span>(<span class=\"string\">\"ADMIN\"</span>,<span class=\"string\">\"USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.roles</span>(<span class=\"string\">\"USER\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码里通过方法auth.inMemoryAuthentication()获取AuthenticationManagerBuilder对象，并设置了两个用户admin和user同时设置对应密码和所拥有的权限。</p>\n<p>这里需要注意的是，roles()方法是authorities()方法的简写形式。roles()方法所给定的值都会加一个”ROLE_”前缀，并将其作为权限授予用户。实际上，如下用户配置与上面程序是一样的。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">     <span class=\"comment\">//基于内存的用户存储、认证</span></span><br><span class=\"line\">    <span class=\"selector-tag\">auth</span><span class=\"selector-class\">.inMemoryAuthentication</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.authorities</span>(<span class=\"string\">\"ROLE_AMIN\"</span>,<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.authorities</span>(<span class=\"string\">\"ROLE_USER\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了上面的方法还有一些其它方法可以配置用户的详细信息。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">accountExpired</span><span class=\"params\">(boolean)</span></span> 定义账号是否已经过期</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">accountLocked</span><span class=\"params\">(boolean)</span></span> 定义账号是否已经锁定</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">and</span><span class=\"params\">()</span></span> 用来连接配置</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authorities</span><span class=\"params\">(GrantedAuthority...)</span></span> 授予某个用户一项或多项权限</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authorities</span><span class=\"params\">(List&lt;? extends GrantedAuthority&gt;)</span></span> 授予某个用户一项或多项权限</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authorities</span><span class=\"params\">(String...)</span></span> 授予某个用户一项或多项权限</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">credentialsExpired</span><span class=\"params\">(boolean)</span></span> 定义凭证是否已经过期</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">disabled</span><span class=\"params\">(boolean)</span></span> 定义账号是否已被禁用</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">password</span><span class=\"params\">(String)</span></span> 定义用户的密码</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">roles</span><span class=\"params\">(String...)</span></span> 授予某个用户一项或多项角色</span><br></pre></td></tr></table></figure></p>\n<p>xml配置方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"admin\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"user\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基于数据库表用户存储认证\"><a href=\"#基于数据库表用户存储认证\" class=\"headerlink\" title=\"基于数据库表用户存储认证\"></a>基于数据库表用户存储认证</h2><p>通常我们都会将用户数据存储在关系型数据库中，并通过jdbc进行访问。spring security使用以jdbc为支撑的用户存储，我们可以使用下面的方式进行配置。</p>\n<p>基于注解编码方式：<br><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">    //基于数据库的用户存储、认证</span><br><span class=\"line\">    auth.jdbcAuthentication().dataSource(dataSource)</span><br><span class=\"line\">            .usersByUsernameQuery(\"<span class=\"keyword\">select</span> account,<span class=\"keyword\">password</span>,<span class=\"literal\">true</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">            .authoritiesByUsernameQuery(\"</span><span class=\"keyword\">select</span> account,<span class=\"keyword\">role</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")；</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个查询语句获取了用户的基本信息，第二个查询语句获取了用户权限数据。</p>\n<p>基于xml配置方式：<br><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;security:authentication-manager&gt;</span><br><span class=\"line\">        &lt;security:authentication-provider&gt;</span><br><span class=\"line\">            &lt;security:jdbc-user-service data-source-ref=\"dataSource\"</span><br><span class=\"line\">                                        authorities-by-username-query=\"<span class=\"keyword\">select</span> account,<span class=\"keyword\">role</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">                                        users-by-username-query=\"</span><span class=\"keyword\">select</span> account,<span class=\"keyword\">password</span>,<span class=\"literal\">true</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;security:password-encoder ref=\"</span>bcryptEncoder<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/security:authentication-manager&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基于LDAP进行用户存储认证\"><a href=\"#基于LDAP进行用户存储认证\" class=\"headerlink\" title=\"基于LDAP进行用户存储认证\"></a>基于LDAP进行用户存储认证</h2><p>这种方式没有进行测试，如果感兴趣可以自行测试。</p>\n<h2 id=\"配置自定义的用户存储认证\"><a href=\"#配置自定义的用户存储认证\" class=\"headerlink\" title=\"配置自定义的用户存储认证\"></a>配置自定义的用户存储认证</h2><p>这种方式更为灵活，更适合在生产环境使用。这种方式不在局限于存储环境。自定义的方式也很简单。只需要提供一个UserDetailService接口实现即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blog.admin.security;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.blog.admin.dao.UserDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> db.model.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;li&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lixin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 17/3/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogSecurityUserDetailsService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 校验用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userDao.queryByUserName(username);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user == <span class=\"keyword\">null</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UsernameNotFoundException(<span class=\"string\">\"user not found\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> org.springframework.security.core.userdetails.User(user.getAccount(),user.getPassword(),userDao.getUserGrantedAuthoritys(user.getId()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>自定义的方式只要实现接口方法loadUserByUsername（String username）即可，返回代表用户的UserDetails对象。调用方式也很简单：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自定义方式</span></span><br><span class=\"line\">    auth.userDetailsService(securityUserDetailsService);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基于xml方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span> <span class=\"attr\">user-service-ref</span>=<span class=\"string\">\"blogUserDetailService\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"密码加密策略\"><a href=\"#密码加密策略\" class=\"headerlink\" title=\"密码加密策略\"></a>密码加密策略</h1><p>通常我们在存储密码的时候都是进行加密的，spring security默认提供了三种密码存储方式，同时也可以使用自定义的加密方式：</p>\n<ul>\n<li>NoOpPasswordEncoder      明文方式保存</li>\n<li>BCtPasswordEncoder       强hash方式加密</li>\n<li>StandardPasswordEncoder  SHA-256方式加密</li>\n<li>实现PasswordEncoder接口       自定义加密方式<br>注解编码方式：<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">    //基于数据库的用户存储、认证</span><br><span class=\"line\">    auth.jdbcAuthentication().dataSource(dataSource)</span><br><span class=\"line\">            .usersByUsernameQuery(\"<span class=\"keyword\">select</span> account,<span class=\"keyword\">password</span>,<span class=\"literal\">true</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">            .authoritiesByUsernameQuery(\"</span><span class=\"keyword\">select</span> account,<span class=\"keyword\">role</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">            .passwordEncoder(NoOpPasswordEncoder.getInstance());</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过方法passwordEncoder传入对应的加密实例即可。</p>\n<p>xml配置方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:jdbc-user-service</span> <span class=\"attr\">data-source-ref</span>=<span class=\"string\">\"dataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                        <span class=\"attr\">authorities-by-username-query</span>=<span class=\"string\">\"select account,role from user where account=?\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                        <span class=\"attr\">users-by-username-query</span>=<span class=\"string\">\"select account,password,true from user where account=?\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:password-encoder</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bcryptEncoder\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bcryptEncoder\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"请求拦截策略\"><a href=\"#请求拦截策略\" class=\"headerlink\" title=\"请求拦截策略\"></a>请求拦截策略</h1><p>下面开始介绍一下spring security的重要功能，请求拦截策略。spring security的请求拦截匹配有两种风格，ant风格和正则表达式风格。编码方式是通过重载configure(HttpSecurity)方法实现。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面使用的是ant风格的匹配，可以通过http.regexMatcher()方法使用正则表达式风格。</p>\n<p>对应的xml配置方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>除了上面的请求保护方法外，还有一些方法能够用来定义如何保护请求。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">access</span><span class=\"params\">(String)</span></span>     如果给定的SpEL表达式计算结果为true，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">anonymous</span><span class=\"params\">()</span></span>        允许匿名用户访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authenticated</span><span class=\"params\">()</span></span>    允许认证过的用户访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">denyAll</span><span class=\"params\">()</span></span>          无条件拒绝所有访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">fullyAuthenticated</span><span class=\"params\">()</span></span>   如果用户是完整认证的话（不是通过Remember-me功能认证的），就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasAnyAuthority</span><span class=\"params\">(String...)</span></span>   如果用户具备给定权限中的某一个的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasAnyRole</span><span class=\"params\">(String...)</span></span>   如果用户具备给定角色中的某一个的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasAuthority</span><span class=\"params\">(String)</span></span>   如果用户具备给定权限的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasIpAddress</span><span class=\"params\">(String)</span></span>   如果请求来自给定IP地址的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasRole</span><span class=\"params\">(String)</span></span>   如果用户具备给定角色的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">not</span><span class=\"params\">()</span></span>   对其他访问方法的结果求反</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">permitAll</span><span class=\"params\">()</span></span>   无条件允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rememberMe</span><span class=\"params\">()</span></span>   如果用户是通过Remember-me功能认证的，就允许访问</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"强制安全性通道\"><a href=\"#强制安全性通道\" class=\"headerlink\" title=\"强制安全性通道\"></a>强制安全性通道</h1><p>通常我们都是使用http发送数据，这种方式是不安全的。对于敏感信息我们通常都是通过https进行加密发送。spring security对于安全性通道也提供了一种方式。我们可以在配置中添加requiresChannel()方法使url强制使用https。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.requiresChannel</span>()<span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/info\"</span>)<span class=\"selector-class\">.requiresSecure</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不论何时，只要是对“/admin/info”的请求，spring security都认为需要安全性通道，并自动将请求重定向到https上。</p>\n<p>与之相反，如果有些请求不需要https传送，可以使用requiresInsecure()替代requiresSecure()，将请求声明为始终使用http传送。</p>\n<p>对应xml配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/info\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span> <span class=\"attr\">requires-channel</span>=<span class=\"string\">\"https\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"防止CSRF\"><a href=\"#防止CSRF\" class=\"headerlink\" title=\"防止CSRF\"></a>防止CSRF</h1><p>spring security从版本3.2开始，默认就会启用CSRF防护。spring security通过一个同步token的方式来实现CSRF防护功能。它会拦截状态变化的请求，并检查CSRF token。如果请求中不包含CSRF token的话，或者token不能与服务器端的token匹配，请求就会失败，并抛出CsrfException异常。</p>\n<p>如果使用JSP作为页面模板的话，需要作的非常简单。<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"attribute\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attribute\">name</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;_csrf.parameterName&#125;</span>\"</span> <span class=\"attribute\">value</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;_csrf.token&#125;</span>\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就spring security就会自动生成csrf token。如果想关闭csrf防护，需要作的也很简单，只需要调用一下csrf().disable();即可。</p>\n<p>   编码方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.csrf</span>()<span class=\"selector-class\">.disable</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对应xml方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"remember-me功能\"><a href=\"#remember-me功能\" class=\"headerlink\" title=\"remember-me功能\"></a>remember-me功能</h1><p>remember-me是一个很重要的功能，用户肯定不希望每次都输入用户名密码进行登录。spring security提供的remember-me功能使用起来非常简单。启用这个功能只需要调用rememberMe()方法即可。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.rememberMe</span>()<span class=\"selector-class\">.key</span>(<span class=\"string\">\"abc\"</span>)<span class=\"selector-class\">.rememberMeParameter</span>(<span class=\"string\">\"remember_me\"</span>)<span class=\"selector-class\">.rememberMeCookieName</span>(<span class=\"string\">\"my-remember-me\"</span>)<span class=\"selector-class\">.tokenValiditySeconds</span>(<span class=\"number\">86400</span>)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同时可以设置参数名称，cookie的name和过期时间。对应的xml配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:remember-me</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>remember-me有多种参数可以选择配置。</p>\n<p>这里有个需要注意的地方 ，在登录页面内的remember-me的input标签内不要设置value的值，否则remember-me功能将不会生效。</p>\n<h1 id=\"自定义登录页面\"><a href=\"#自定义登录页面\" class=\"headerlink\" title=\"自定义登录页面\"></a>自定义登录页面</h1><p>spring security会提供一个默认的登录页面，如果你想使用自己的登录页面，可以这样设置。</p>\n<p>编码方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.formLogin</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.loginPage</span>(<span class=\"string\">\"/login\"</span>)<span class=\"selector-class\">.usernameParameter</span>(<span class=\"string\">\"username\"</span>)<span class=\"selector-class\">.passwordParameter</span>(<span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.exceptionHandling</span>()<span class=\"selector-class\">.accessDeniedPage</span>(<span class=\"string\">\"/loginfail\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过formLogin()方法来设置使用自定义登录页面，loginPage是登录页面地址，accessDeniePage登录失败跳转地址。</p>\n<p>对应的xml配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> <span class=\"attr\">login-page</span>=<span class=\"string\">\"/login\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/loginfail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>到此spring security的一些常用功能就介绍完了，写的比较粗糙，可能会存在一些错误。欢迎大家反馈交流。</p>\n","site":{"data":{}},"excerpt":"<p>本篇文章只作为spring security入门使用，具体深入内容请自行查询相关资料。<br></p>","more":"<p></p>\n<h1 id=\"spring-security简介\"><a href=\"#spring-security简介\" class=\"headerlink\" title=\"spring security简介\"></a>spring security简介</h1><p> Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。当前版本为4.2.3。</p>\n<h1 id=\"接入方式\"><a href=\"#接入方式\" class=\"headerlink\" title=\"接入方式\"></a>接入方式</h1><p>Spring Security的接入方式一共有两种：基于注解方式和基于xml配置方式。下面对两种接入方式作一下介绍。<br>首先是spring security依赖引入<br>pom.xml<br><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span></span><br><span class=\"line\"><span class=\"xml\">         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\"><span class=\"xml\">         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>demo.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- spring版本号 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">security.version</span>&gt;</span>4.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">security.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">log4j.version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">log4j.version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!-- springframework --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-oxm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;security.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;security.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-taglibs<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$</span><span class=\"template-variable\">&#123;security.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0-alpha-1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.30<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>ROOT<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>config/$</span><span class=\"template-variable\">&#123;env&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>这里使用的是servlet3.0，自servlet3.0+规范后，允许servlet，filter，listener不必声明在web.xml中，而是以硬编码的方式存在，实现容器的零配置。</p>\n<h2 id=\"基于注解方式\"><a href=\"#基于注解方式\" class=\"headerlink\" title=\"基于注解方式\"></a>基于注解方式</h2><p>第一步是要创建Spring Security的Java 配置类。<br>创建类SecurityConfiguration继承WebSecurityConfigurerAdapter，来对我们应用中所有的安全相关的事项（所有url，验证用户名密码，表单重定向等）进行控制。</p>\n<p>SecurityConfiguration.java<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.security.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;li&gt;security config&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lixin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 17/3/22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\">AuthenticationManager <span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.<span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> http</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> web</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(WebSecurity web)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>WebSecurityConfigurerAdapter共有三个configure方法。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">configure</span><span class=\"params\">(WebSecurity)</span></span> 通过重载，配置Spring Security的Filter链</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configure</span><span class=\"params\">(HttpSecurity)</span></span> 通过重载，配置如何通过拦截器保护请求</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder)</span></span> 通过重载，配置user-detail服务</span><br></pre></td></tr></table></figure></p>\n<p>@EnableWebSecurity 注解将会启用Web安全功能。</p>\n<p>第二步是初始化springSecurityFilter注册类，这里使用的方法是继承类AbstractSecurityWebApplicationInitializer<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.security.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.context.<span class=\"type\">AbstractSecurityWebApplicationInitializer</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;li&gt;注册springSecurityFilter&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @author lixin</span></span><br><span class=\"line\"><span class=\"comment\"> * @create 17/3/22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityWebApplicationInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSecurityWebApplicationInitializer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里可以没有任何实现。至此，基于注解方式的接入就完成了。下面介绍一下基于xml配置方式的接入。</p>\n<h2 id=\"基于xml配置方式接入\"><a href=\"#基于xml配置方式接入\" class=\"headerlink\" title=\"基于xml配置方式接入\"></a>基于xml配置方式接入</h2><p>第一步，在web.xml加入配置<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">filter</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">filter</span>-name&gt;springSecurityFilterChain&lt;/<span class=\"built_in\">filter</span>-name&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">filter</span>-<span class=\"keyword\">class</span>&gt;org.springframework.web.<span class=\"built_in\">filter</span>.DelegatingFilterProxy&lt;/<span class=\"built_in\">filter</span>-<span class=\"keyword\">class</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"built_in\">filter</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"built_in\">filter</span>-mapping&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">filter</span>-name&gt;springSecurityFilterChain&lt;/<span class=\"built_in\">filter</span>-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">  &lt;/<span class=\"built_in\">filter</span>-mapping&gt;</span><br></pre></td></tr></table></figure></p>\n<p>第二步，增加spring-security.xml，并引入到application.xml内</p>\n<p>spring-security.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">           http://www.springframework.org/schema/security</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">           http://www.springframework.org/schema/security/spring-security.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">        ..</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>具体配置后续会添加。基于xml配置方式就这么多，下面介绍一下用户的存储认证方式。</p>\n<h1 id=\"用户存储认证方式\"><a href=\"#用户存储认证方式\" class=\"headerlink\" title=\"用户存储认证方式\"></a>用户存储认证方式</h1><p>spring security关于用户存储认证方面是非常灵活的，能够基于各种数据存储来认证用户。它内置了多种常见的用户存储场景，下面对各种场景进行下介绍。</p>\n<h2 id=\"使用基于内存的用户存储\"><a href=\"#使用基于内存的用户存储\" class=\"headerlink\" title=\"使用基于内存的用户存储\"></a>使用基于内存的用户存储</h2><p>从名称上可以知道这种方式是将用户名、密码、权限等数据存储在内存中，一般个人开发测试可以使用这种方式。</p>\n<p>注解编码方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">//基于内存的用户存储、认证</span></span><br><span class=\"line\">    <span class=\"selector-tag\">auth</span><span class=\"selector-class\">.inMemoryAuthentication</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.roles</span>(<span class=\"string\">\"ADMIN\"</span>,<span class=\"string\">\"USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.roles</span>(<span class=\"string\">\"USER\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码里通过方法auth.inMemoryAuthentication()获取AuthenticationManagerBuilder对象，并设置了两个用户admin和user同时设置对应密码和所拥有的权限。</p>\n<p>这里需要注意的是，roles()方法是authorities()方法的简写形式。roles()方法所给定的值都会加一个”ROLE_”前缀，并将其作为权限授予用户。实际上，如下用户配置与上面程序是一样的。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">     <span class=\"comment\">//基于内存的用户存储、认证</span></span><br><span class=\"line\">    <span class=\"selector-tag\">auth</span><span class=\"selector-class\">.inMemoryAuthentication</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"admin\"</span>)<span class=\"selector-class\">.authorities</span>(<span class=\"string\">\"ROLE_AMIN\"</span>,<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.withUser</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.password</span>(<span class=\"string\">\"user\"</span>)<span class=\"selector-class\">.authorities</span>(<span class=\"string\">\"ROLE_USER\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了上面的方法还有一些其它方法可以配置用户的详细信息。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">accountExpired</span><span class=\"params\">(boolean)</span></span> 定义账号是否已经过期</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">accountLocked</span><span class=\"params\">(boolean)</span></span> 定义账号是否已经锁定</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">and</span><span class=\"params\">()</span></span> 用来连接配置</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authorities</span><span class=\"params\">(GrantedAuthority...)</span></span> 授予某个用户一项或多项权限</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authorities</span><span class=\"params\">(List&lt;? extends GrantedAuthority&gt;)</span></span> 授予某个用户一项或多项权限</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authorities</span><span class=\"params\">(String...)</span></span> 授予某个用户一项或多项权限</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">credentialsExpired</span><span class=\"params\">(boolean)</span></span> 定义凭证是否已经过期</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">disabled</span><span class=\"params\">(boolean)</span></span> 定义账号是否已被禁用</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">password</span><span class=\"params\">(String)</span></span> 定义用户的密码</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">roles</span><span class=\"params\">(String...)</span></span> 授予某个用户一项或多项角色</span><br></pre></td></tr></table></figure></p>\n<p>xml配置方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"admin\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"user\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基于数据库表用户存储认证\"><a href=\"#基于数据库表用户存储认证\" class=\"headerlink\" title=\"基于数据库表用户存储认证\"></a>基于数据库表用户存储认证</h2><p>通常我们都会将用户数据存储在关系型数据库中，并通过jdbc进行访问。spring security使用以jdbc为支撑的用户存储，我们可以使用下面的方式进行配置。</p>\n<p>基于注解编码方式：<br><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">    //基于数据库的用户存储、认证</span><br><span class=\"line\">    auth.jdbcAuthentication().dataSource(dataSource)</span><br><span class=\"line\">            .usersByUsernameQuery(\"<span class=\"keyword\">select</span> account,<span class=\"keyword\">password</span>,<span class=\"literal\">true</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">            .authoritiesByUsernameQuery(\"</span><span class=\"keyword\">select</span> account,<span class=\"keyword\">role</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")；</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个查询语句获取了用户的基本信息，第二个查询语句获取了用户权限数据。</p>\n<p>基于xml配置方式：<br><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;security:authentication-manager&gt;</span><br><span class=\"line\">        &lt;security:authentication-provider&gt;</span><br><span class=\"line\">            &lt;security:jdbc-user-service data-source-ref=\"dataSource\"</span><br><span class=\"line\">                                        authorities-by-username-query=\"<span class=\"keyword\">select</span> account,<span class=\"keyword\">role</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">                                        users-by-username-query=\"</span><span class=\"keyword\">select</span> account,<span class=\"keyword\">password</span>,<span class=\"literal\">true</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;security:password-encoder ref=\"</span>bcryptEncoder<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/security:authentication-manager&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基于LDAP进行用户存储认证\"><a href=\"#基于LDAP进行用户存储认证\" class=\"headerlink\" title=\"基于LDAP进行用户存储认证\"></a>基于LDAP进行用户存储认证</h2><p>这种方式没有进行测试，如果感兴趣可以自行测试。</p>\n<h2 id=\"配置自定义的用户存储认证\"><a href=\"#配置自定义的用户存储认证\" class=\"headerlink\" title=\"配置自定义的用户存储认证\"></a>配置自定义的用户存储认证</h2><p>这种方式更为灵活，更适合在生产环境使用。这种方式不在局限于存储环境。自定义的方式也很简单。只需要提供一个UserDetailService接口实现即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blog.admin.security;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.blog.admin.dao.UserDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> db.model.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;li&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lixin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 17/3/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogSecurityUserDetailsService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 校验用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userDao.queryByUserName(username);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user == <span class=\"keyword\">null</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UsernameNotFoundException(<span class=\"string\">\"user not found\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> org.springframework.security.core.userdetails.User(user.getAccount(),user.getPassword(),userDao.getUserGrantedAuthoritys(user.getId()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>自定义的方式只要实现接口方法loadUserByUsername（String username）即可，返回代表用户的UserDetails对象。调用方式也很简单：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自定义方式</span></span><br><span class=\"line\">    auth.userDetailsService(securityUserDetailsService);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基于xml方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span> <span class=\"attr\">user-service-ref</span>=<span class=\"string\">\"blogUserDetailService\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"密码加密策略\"><a href=\"#密码加密策略\" class=\"headerlink\" title=\"密码加密策略\"></a>密码加密策略</h1><p>通常我们在存储密码的时候都是进行加密的，spring security默认提供了三种密码存储方式，同时也可以使用自定义的加密方式：</p>\n<ul>\n<li>NoOpPasswordEncoder      明文方式保存</li>\n<li>BCtPasswordEncoder       强hash方式加密</li>\n<li>StandardPasswordEncoder  SHA-256方式加密</li>\n<li>实现PasswordEncoder接口       自定义加密方式<br>注解编码方式：<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置user-detail服务</span></span><br><span class=\"line\"><span class=\"comment\"> * @param auth</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void configure(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class=\"line\">    //基于数据库的用户存储、认证</span><br><span class=\"line\">    auth.jdbcAuthentication().dataSource(dataSource)</span><br><span class=\"line\">            .usersByUsernameQuery(\"<span class=\"keyword\">select</span> account,<span class=\"keyword\">password</span>,<span class=\"literal\">true</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">            .authoritiesByUsernameQuery(\"</span><span class=\"keyword\">select</span> account,<span class=\"keyword\">role</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> account=?<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">            .passwordEncoder(NoOpPasswordEncoder.getInstance());</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过方法passwordEncoder传入对应的加密实例即可。</p>\n<p>xml配置方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:jdbc-user-service</span> <span class=\"attr\">data-source-ref</span>=<span class=\"string\">\"dataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                        <span class=\"attr\">authorities-by-username-query</span>=<span class=\"string\">\"select account,role from user where account=?\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                        <span class=\"attr\">users-by-username-query</span>=<span class=\"string\">\"select account,password,true from user where account=?\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:password-encoder</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bcryptEncoder\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bcryptEncoder\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"请求拦截策略\"><a href=\"#请求拦截策略\" class=\"headerlink\" title=\"请求拦截策略\"></a>请求拦截策略</h1><p>下面开始介绍一下spring security的重要功能，请求拦截策略。spring security的请求拦截匹配有两种风格，ant风格和正则表达式风格。编码方式是通过重载configure(HttpSecurity)方法实现。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面使用的是ant风格的匹配，可以通过http.regexMatcher()方法使用正则表达式风格。</p>\n<p>对应的xml配置方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>除了上面的请求保护方法外，还有一些方法能够用来定义如何保护请求。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">access</span><span class=\"params\">(String)</span></span>     如果给定的SpEL表达式计算结果为true，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">anonymous</span><span class=\"params\">()</span></span>        允许匿名用户访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">authenticated</span><span class=\"params\">()</span></span>    允许认证过的用户访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">denyAll</span><span class=\"params\">()</span></span>          无条件拒绝所有访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">fullyAuthenticated</span><span class=\"params\">()</span></span>   如果用户是完整认证的话（不是通过Remember-me功能认证的），就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasAnyAuthority</span><span class=\"params\">(String...)</span></span>   如果用户具备给定权限中的某一个的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasAnyRole</span><span class=\"params\">(String...)</span></span>   如果用户具备给定角色中的某一个的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasAuthority</span><span class=\"params\">(String)</span></span>   如果用户具备给定权限的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasIpAddress</span><span class=\"params\">(String)</span></span>   如果请求来自给定IP地址的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasRole</span><span class=\"params\">(String)</span></span>   如果用户具备给定角色的话，就允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">not</span><span class=\"params\">()</span></span>   对其他访问方法的结果求反</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">permitAll</span><span class=\"params\">()</span></span>   无条件允许访问</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rememberMe</span><span class=\"params\">()</span></span>   如果用户是通过Remember-me功能认证的，就允许访问</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"强制安全性通道\"><a href=\"#强制安全性通道\" class=\"headerlink\" title=\"强制安全性通道\"></a>强制安全性通道</h1><p>通常我们都是使用http发送数据，这种方式是不安全的。对于敏感信息我们通常都是通过https进行加密发送。spring security对于安全性通道也提供了一种方式。我们可以在配置中添加requiresChannel()方法使url强制使用https。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.requiresChannel</span>()<span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/info\"</span>)<span class=\"selector-class\">.requiresSecure</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不论何时，只要是对“/admin/info”的请求，spring security都认为需要安全性通道，并自动将请求重定向到https上。</p>\n<p>与之相反，如果有些请求不需要https传送，可以使用requiresInsecure()替代requiresSecure()，将请求声明为始终使用http传送。</p>\n<p>对应xml配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/info\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span> <span class=\"attr\">requires-channel</span>=<span class=\"string\">\"https\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"防止CSRF\"><a href=\"#防止CSRF\" class=\"headerlink\" title=\"防止CSRF\"></a>防止CSRF</h1><p>spring security从版本3.2开始，默认就会启用CSRF防护。spring security通过一个同步token的方式来实现CSRF防护功能。它会拦截状态变化的请求，并检查CSRF token。如果请求中不包含CSRF token的话，或者token不能与服务器端的token匹配，请求就会失败，并抛出CsrfException异常。</p>\n<p>如果使用JSP作为页面模板的话，需要作的非常简单。<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"attribute\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attribute\">name</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;_csrf.parameterName&#125;</span>\"</span> <span class=\"attribute\">value</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;_csrf.token&#125;</span>\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就spring security就会自动生成csrf token。如果想关闭csrf防护，需要作的也很简单，只需要调用一下csrf().disable();即可。</p>\n<p>   编码方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.csrf</span>()<span class=\"selector-class\">.disable</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对应xml方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"remember-me功能\"><a href=\"#remember-me功能\" class=\"headerlink\" title=\"remember-me功能\"></a>remember-me功能</h1><p>remember-me是一个很重要的功能，用户肯定不希望每次都输入用户名密码进行登录。spring security提供的remember-me功能使用起来非常简单。启用这个功能只需要调用rememberMe()方法即可。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.rememberMe</span>()<span class=\"selector-class\">.key</span>(<span class=\"string\">\"abc\"</span>)<span class=\"selector-class\">.rememberMeParameter</span>(<span class=\"string\">\"remember_me\"</span>)<span class=\"selector-class\">.rememberMeCookieName</span>(<span class=\"string\">\"my-remember-me\"</span>)<span class=\"selector-class\">.tokenValiditySeconds</span>(<span class=\"number\">86400</span>)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同时可以设置参数名称，cookie的name和过期时间。对应的xml配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:remember-me</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>remember-me有多种参数可以选择配置。</p>\n<p>这里有个需要注意的地方 ，在登录页面内的remember-me的input标签内不要设置value的值，否则remember-me功能将不会生效。</p>\n<h1 id=\"自定义登录页面\"><a href=\"#自定义登录页面\" class=\"headerlink\" title=\"自定义登录页面\"></a>自定义登录页面</h1><p>spring security会提供一个默认的登录页面，如果你想使用自己的登录页面，可以这样设置。</p>\n<p>编码方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param http</span></span><br><span class=\"line\"><span class=\"comment\"> * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Override</span></span><br><span class=\"line\">public void configure(HttpSecurity http)throws Exception&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">http</span><span class=\"selector-class\">.authorizeRequests</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>)<span class=\"selector-class\">.permitAll</span>()   <span class=\"comment\">//任何人都可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/admin/**\"</span>)<span class=\"selector-class\">.access</span>(<span class=\"string\">\"hasRole('ADMIN')\"</span>)     <span class=\"comment\">//持有user权限的用户可以访问</span></span><br><span class=\"line\">            <span class=\"selector-class\">.antMatchers</span>(<span class=\"string\">\"/user/**\"</span>)<span class=\"selector-class\">.hasAuthority</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.formLogin</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.loginPage</span>(<span class=\"string\">\"/login\"</span>)<span class=\"selector-class\">.usernameParameter</span>(<span class=\"string\">\"username\"</span>)<span class=\"selector-class\">.passwordParameter</span>(<span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">            <span class=\"selector-class\">.and</span>()<span class=\"selector-class\">.exceptionHandling</span>()<span class=\"selector-class\">.accessDeniedPage</span>(<span class=\"string\">\"/loginfail\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过formLogin()方法来设置使用自定义登录页面，loginPage是登录页面地址，accessDeniePage登录失败跳转地址。</p>\n<p>对应的xml配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_ADMIN')\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/user/*\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> <span class=\"attr\">login-page</span>=<span class=\"string\">\"/login\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/loginfail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>到此spring security的一些常用功能就介绍完了，写的比较粗糙，可能会存在一些错误。欢迎大家反馈交流。</p>"},{"title":"内存模型","date":"2018-02-24T07:56:59.000Z","_content":"\nJava虚拟机规范中试图定义一种Java内存模型（Java Memory Model, JMM）来屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。\n\n<!-- more -->\n\n#### 主内存与工作内存\nJava内存模型规定了所有的变量都存储在***主内存（Main Memory）***中。每条线程还有自己的***工作内存（Working Memory）***，线程的工作内存中保存了被该线程使用到的***变量的主内存副本拷贝***（这里的“拷贝副本”并不是将对象整个拷贝，而是对这个对象的引用、对象中某个被线程访问的字段是有可能存在拷贝的），***线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量***。不同的线程之间也无法直接访问对方的工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如下图：\n![](内存模型/guanxitu.png)\n\n\n#### 内存间交互操作\n关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。\n> - lock（锁定）：作用于***主内存***的变量，它把一个变量标识为一条***线程独占***的状态。\n> - unlock（解锁）：作用于***主内存***的变量，它把一个处于锁定状态的变量释放出来，***释放后的变量才可以被其它线程锁定***。\n> - read（读取）：作用于***主内存***的变量，它把一个变量的值***从主内存传输到线程的工作内存中***，以便随后的load动作使用。\n> - load（载入）：作用于***工作内存***的变量，它把read操作从主内存中得到的变量值放入***工作内存的变量副本***中。\n> - use（使用）：作用于***工作内存***的变量，它把工作内存中一个变量的值传递给***执行引擎***，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。\n> - assign（赋值）：作用于***工作内存***的变量，它把一个***从执行引擎接收到的值赋给工作内存的变量***，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。\n> - store（存储）：作用于***工作内存***的变量，它把工作内存中一个变量的值***传送到主内存***中，以便随后的write操作使用。\n> - write（写入）：作用于***主内存***的变量，它把store操作从工作内存中得到的变量的值***放入主内存的变量***中。\n\n这8种指令可以结合下图一起看：\n![](内存模型/shilingtu.png)\n\n\n***如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。注意，Java内存模型要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之间、store与write之间是可插入其它指令的。***除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：\n\n> - 不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。\n> - 不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。\n> - 不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。\n> -  一个新变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。\n> - 一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只在执行相同次数的unlock操作，变量才会被解锁。\n> - 如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。\n> - 如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其它线程锁定住的变量。\n>- 对一个变量执行unlock操作之前，必须把此变量同步回主内存中（执行store、write操作）。\n","source":"_posts/内存模型.md","raw":"---\ntitle: 内存模型\ndate: 2018-02-24 15:56:59\ntags:\n- JVM\ncategories:\n- JVM\n---\n\nJava虚拟机规范中试图定义一种Java内存模型（Java Memory Model, JMM）来屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。\n\n<!-- more -->\n\n#### 主内存与工作内存\nJava内存模型规定了所有的变量都存储在***主内存（Main Memory）***中。每条线程还有自己的***工作内存（Working Memory）***，线程的工作内存中保存了被该线程使用到的***变量的主内存副本拷贝***（这里的“拷贝副本”并不是将对象整个拷贝，而是对这个对象的引用、对象中某个被线程访问的字段是有可能存在拷贝的），***线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量***。不同的线程之间也无法直接访问对方的工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如下图：\n![](内存模型/guanxitu.png)\n\n\n#### 内存间交互操作\n关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。\n> - lock（锁定）：作用于***主内存***的变量，它把一个变量标识为一条***线程独占***的状态。\n> - unlock（解锁）：作用于***主内存***的变量，它把一个处于锁定状态的变量释放出来，***释放后的变量才可以被其它线程锁定***。\n> - read（读取）：作用于***主内存***的变量，它把一个变量的值***从主内存传输到线程的工作内存中***，以便随后的load动作使用。\n> - load（载入）：作用于***工作内存***的变量，它把read操作从主内存中得到的变量值放入***工作内存的变量副本***中。\n> - use（使用）：作用于***工作内存***的变量，它把工作内存中一个变量的值传递给***执行引擎***，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。\n> - assign（赋值）：作用于***工作内存***的变量，它把一个***从执行引擎接收到的值赋给工作内存的变量***，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。\n> - store（存储）：作用于***工作内存***的变量，它把工作内存中一个变量的值***传送到主内存***中，以便随后的write操作使用。\n> - write（写入）：作用于***主内存***的变量，它把store操作从工作内存中得到的变量的值***放入主内存的变量***中。\n\n这8种指令可以结合下图一起看：\n![](内存模型/shilingtu.png)\n\n\n***如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。注意，Java内存模型要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之间、store与write之间是可插入其它指令的。***除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：\n\n> - 不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。\n> - 不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。\n> - 不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。\n> -  一个新变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。\n> - 一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只在执行相同次数的unlock操作，变量才会被解锁。\n> - 如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。\n> - 如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其它线程锁定住的变量。\n>- 对一个变量执行unlock操作之前，必须把此变量同步回主内存中（执行store、write操作）。\n","slug":"内存模型","published":1,"updated":"2018-02-24T08:00:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje157qe60006gf9kblb42bm5","content":"<p>Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model, JMM）来屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p>\n<a id=\"more\"></a>\n<h4 id=\"主内存与工作内存\"><a href=\"#主内存与工作内存\" class=\"headerlink\" title=\"主内存与工作内存\"></a>主内存与工作内存</h4><p>Java内存模型规定了所有的变量都存储在<strong><em>主内存（Main Memory）</em></strong>中。每条线程还有自己的<strong><em>工作内存（Working Memory）</em></strong>，线程的工作内存中保存了被该线程使用到的<strong><em>变量的主内存副本拷贝</em></strong>（这里的“拷贝副本”并不是将对象整个拷贝，而是对这个对象的引用、对象中某个被线程访问的字段是有可能存在拷贝的），<strong><em>线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量</em></strong>。不同的线程之间也无法直接访问对方的工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如下图：<br><img src=\"/JVM/内存模型/guanxitu.png\" alt=\"\"></p>\n<h4 id=\"内存间交互操作\"><a href=\"#内存间交互操作\" class=\"headerlink\" title=\"内存间交互操作\"></a>内存间交互操作</h4><p>关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。</p>\n<blockquote>\n<ul>\n<li>lock（锁定）：作用于<strong><em>主内存</em></strong>的变量，它把一个变量标识为一条<strong><em>线程独占</em></strong>的状态。</li>\n<li>unlock（解锁）：作用于<strong><em>主内存</em></strong>的变量，它把一个处于锁定状态的变量释放出来，<strong><em>释放后的变量才可以被其它线程锁定</em></strong>。</li>\n<li>read（读取）：作用于<strong><em>主内存</em></strong>的变量，它把一个变量的值<strong><em>从主内存传输到线程的工作内存中</em></strong>，以便随后的load动作使用。</li>\n<li>load（载入）：作用于<strong><em>工作内存</em></strong>的变量，它把read操作从主内存中得到的变量值放入<strong><em>工作内存的变量副本</em></strong>中。</li>\n<li>use（使用）：作用于<strong><em>工作内存</em></strong>的变量，它把工作内存中一个变量的值传递给<strong><em>执行引擎</em></strong>，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li>\n<li>assign（赋值）：作用于<strong><em>工作内存</em></strong>的变量，它把一个<strong><em>从执行引擎接收到的值赋给工作内存的变量</em></strong>，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li>\n<li>store（存储）：作用于<strong><em>工作内存</em></strong>的变量，它把工作内存中一个变量的值<strong><em>传送到主内存</em></strong>中，以便随后的write操作使用。</li>\n<li>write（写入）：作用于<strong><em>主内存</em></strong>的变量，它把store操作从工作内存中得到的变量的值<strong><em>放入主内存的变量</em></strong>中。</li>\n</ul>\n</blockquote>\n<p>这8种指令可以结合下图一起看：<br><img src=\"/JVM/内存模型/shilingtu.png\" alt=\"\"></p>\n<p><strong><em>如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。注意，Java内存模型要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之间、store与write之间是可插入其它指令的。</em></strong>除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：</p>\n<blockquote>\n<ul>\n<li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li>\n<li>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li>\n<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li>\n<li>一个新变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。</li>\n<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只在执行相同次数的unlock操作，变量才会被解锁。</li>\n<li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li>\n<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其它线程锁定住的变量。</li>\n<li>对一个变量执行unlock操作之前，必须把此变量同步回主内存中（执行store、write操作）。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model, JMM）来屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p>","more":"<h4 id=\"主内存与工作内存\"><a href=\"#主内存与工作内存\" class=\"headerlink\" title=\"主内存与工作内存\"></a>主内存与工作内存</h4><p>Java内存模型规定了所有的变量都存储在<strong><em>主内存（Main Memory）</em></strong>中。每条线程还有自己的<strong><em>工作内存（Working Memory）</em></strong>，线程的工作内存中保存了被该线程使用到的<strong><em>变量的主内存副本拷贝</em></strong>（这里的“拷贝副本”并不是将对象整个拷贝，而是对这个对象的引用、对象中某个被线程访问的字段是有可能存在拷贝的），<strong><em>线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量</em></strong>。不同的线程之间也无法直接访问对方的工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如下图：<br><img src=\"/JVM/内存模型/guanxitu.png\" alt=\"\"></p>\n<h4 id=\"内存间交互操作\"><a href=\"#内存间交互操作\" class=\"headerlink\" title=\"内存间交互操作\"></a>内存间交互操作</h4><p>关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。</p>\n<blockquote>\n<ul>\n<li>lock（锁定）：作用于<strong><em>主内存</em></strong>的变量，它把一个变量标识为一条<strong><em>线程独占</em></strong>的状态。</li>\n<li>unlock（解锁）：作用于<strong><em>主内存</em></strong>的变量，它把一个处于锁定状态的变量释放出来，<strong><em>释放后的变量才可以被其它线程锁定</em></strong>。</li>\n<li>read（读取）：作用于<strong><em>主内存</em></strong>的变量，它把一个变量的值<strong><em>从主内存传输到线程的工作内存中</em></strong>，以便随后的load动作使用。</li>\n<li>load（载入）：作用于<strong><em>工作内存</em></strong>的变量，它把read操作从主内存中得到的变量值放入<strong><em>工作内存的变量副本</em></strong>中。</li>\n<li>use（使用）：作用于<strong><em>工作内存</em></strong>的变量，它把工作内存中一个变量的值传递给<strong><em>执行引擎</em></strong>，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li>\n<li>assign（赋值）：作用于<strong><em>工作内存</em></strong>的变量，它把一个<strong><em>从执行引擎接收到的值赋给工作内存的变量</em></strong>，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li>\n<li>store（存储）：作用于<strong><em>工作内存</em></strong>的变量，它把工作内存中一个变量的值<strong><em>传送到主内存</em></strong>中，以便随后的write操作使用。</li>\n<li>write（写入）：作用于<strong><em>主内存</em></strong>的变量，它把store操作从工作内存中得到的变量的值<strong><em>放入主内存的变量</em></strong>中。</li>\n</ul>\n</blockquote>\n<p>这8种指令可以结合下图一起看：<br><img src=\"/JVM/内存模型/shilingtu.png\" alt=\"\"></p>\n<p><strong><em>如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。注意，Java内存模型要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之间、store与write之间是可插入其它指令的。</em></strong>除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：</p>\n<blockquote>\n<ul>\n<li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li>\n<li>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li>\n<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li>\n<li>一个新变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。</li>\n<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只在执行相同次数的unlock操作，变量才会被解锁。</li>\n<li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li>\n<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其它线程锁定住的变量。</li>\n<li>对一个变量执行unlock操作之前，必须把此变量同步回主内存中（执行store、write操作）。</li>\n</ul>\n</blockquote>"},{"title":"垃圾收集算法","date":"2018-02-24T07:51:12.000Z","_content":"\n#### 标记-清除算法\n标记-清除算法是最基础的算法，算法分为“标记”和“清除”两个阶段：\n1. 标记：首先标记出所有需要回收的对象，标记过程可以参考[《深入理解JAVA虚拟机》学习笔记--对象存活算法](/JVM/对象存活算法)。\n2. 清除：对标记的对象进行清除。\n\n<!-- more -->\n###### 缺点：\n- 效率，标记和清除两个过程的效率都不高。\n- 空间，标记清除后会产生大量的不连续内存碎片，在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n#### 复制算法\n为了解决 **效率** 的问题，一种称为 “复制” 的收集算法出现了，它将内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块内存用完后，就将还存活的对象复制到另外一块上，然后再把已使用过的内存空间一次清理掉。这种算法解决了内存碎片的复杂情况，但是代价是将内存缩小为了原来的一半。\n***HotSpot 并没有按照 1:1 的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的 Survivor 空间，比例为 8:1:1。\n当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。这样每次新生代中可用内存空间为整个新生代容量的90%(80%+10%) ，只有10%的内存会被“浪费”。***\n\n#### 标记-整理算法\n复制收集算法在对象存活率较高时，就要进行较多的复制操作，效率会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n固针对老年代的特点，提出了另一种“标记-整理”算法，具体过程为：\n1. 标记：标记过程与“标记-清除”算法的标记一样。\n2. 整理：将所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\n\n#### 分代收集算法\n当前商业虚拟机的垃圾收集都采用分代收集算法，这种算法的思想是 “**根据对象存活周期的不同将内存划分为几块，对不同区域采用不同的收集算法**” 。\n- 新生代：新生代每次收集进都有大批对象死去，只有少量存活，采用 **复制算法** 只需要付出少量的存活对象复制成本就可以完成收集。\n- 老年代：因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 **标记-整理** 或 **标记-清除** 算法来进行回收。\n","source":"_posts/垃圾收集算法.md","raw":"---\ntitle: 垃圾收集算法\ndate: 2018-02-24 15:51:12\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n#### 标记-清除算法\n标记-清除算法是最基础的算法，算法分为“标记”和“清除”两个阶段：\n1. 标记：首先标记出所有需要回收的对象，标记过程可以参考[《深入理解JAVA虚拟机》学习笔记--对象存活算法](/JVM/对象存活算法)。\n2. 清除：对标记的对象进行清除。\n\n<!-- more -->\n###### 缺点：\n- 效率，标记和清除两个过程的效率都不高。\n- 空间，标记清除后会产生大量的不连续内存碎片，在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n#### 复制算法\n为了解决 **效率** 的问题，一种称为 “复制” 的收集算法出现了，它将内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块内存用完后，就将还存活的对象复制到另外一块上，然后再把已使用过的内存空间一次清理掉。这种算法解决了内存碎片的复杂情况，但是代价是将内存缩小为了原来的一半。\n***HotSpot 并没有按照 1:1 的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的 Survivor 空间，比例为 8:1:1。\n当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。这样每次新生代中可用内存空间为整个新生代容量的90%(80%+10%) ，只有10%的内存会被“浪费”。***\n\n#### 标记-整理算法\n复制收集算法在对象存活率较高时，就要进行较多的复制操作，效率会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n固针对老年代的特点，提出了另一种“标记-整理”算法，具体过程为：\n1. 标记：标记过程与“标记-清除”算法的标记一样。\n2. 整理：将所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\n\n#### 分代收集算法\n当前商业虚拟机的垃圾收集都采用分代收集算法，这种算法的思想是 “**根据对象存活周期的不同将内存划分为几块，对不同区域采用不同的收集算法**” 。\n- 新生代：新生代每次收集进都有大批对象死去，只有少量存活，采用 **复制算法** 只需要付出少量的存活对象复制成本就可以完成收集。\n- 老年代：因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 **标记-整理** 或 **标记-清除** 算法来进行回收。\n","slug":"垃圾收集算法","published":1,"updated":"2018-02-24T08:08:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje157qen0008gf9kn7ffdjfg","content":"<h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p>标记-清除算法是最基础的算法，算法分为“标记”和“清除”两个阶段：</p>\n<ol>\n<li>标记：首先标记出所有需要回收的对象，标记过程可以参考<a href=\"/JVM/对象存活算法\">《深入理解JAVA虚拟机》学习笔记–对象存活算法</a>。</li>\n<li>清除：对标记的对象进行清除。</li>\n</ol>\n<a id=\"more\"></a>\n<h6 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h6><ul>\n<li>效率，标记和清除两个过程的效率都不高。</li>\n<li>空间，标记清除后会产生大量的不连续内存碎片，在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ul>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>为了解决 <strong>效率</strong> 的问题，一种称为 “复制” 的收集算法出现了，它将内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块内存用完后，就将还存活的对象复制到另外一块上，然后再把已使用过的内存空间一次清理掉。这种算法解决了内存碎片的复杂情况，但是代价是将内存缩小为了原来的一半。<br><strong><em>HotSpot 并没有按照 1:1 的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的 Survivor 空间，比例为 8:1:1。<br>当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。这样每次新生代中可用内存空间为整个新生代容量的90%(80%+10%) ，只有10%的内存会被“浪费”。</em></strong></p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><p>复制收集算法在对象存活率较高时，就要进行较多的复制操作，效率会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。<br>固针对老年代的特点，提出了另一种“标记-整理”算法，具体过程为：</p>\n<ol>\n<li>标记：标记过程与“标记-清除”算法的标记一样。</li>\n<li>整理：将所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</li>\n</ol>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>当前商业虚拟机的垃圾收集都采用分代收集算法，这种算法的思想是 “<strong>根据对象存活周期的不同将内存划分为几块，对不同区域采用不同的收集算法</strong>” 。</p>\n<ul>\n<li>新生代：新生代每次收集进都有大批对象死去，只有少量存活，采用 <strong>复制算法</strong> 只需要付出少量的存活对象复制成本就可以完成收集。</li>\n<li>老年代：因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 <strong>标记-整理</strong> 或 <strong>标记-清除</strong> 算法来进行回收。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p>标记-清除算法是最基础的算法，算法分为“标记”和“清除”两个阶段：</p>\n<ol>\n<li>标记：首先标记出所有需要回收的对象，标记过程可以参考<a href=\"/JVM/对象存活算法\">《深入理解JAVA虚拟机》学习笔记–对象存活算法</a>。</li>\n<li>清除：对标记的对象进行清除。</li>\n</ol>","more":"<h6 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h6><ul>\n<li>效率，标记和清除两个过程的效率都不高。</li>\n<li>空间，标记清除后会产生大量的不连续内存碎片，在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ul>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>为了解决 <strong>效率</strong> 的问题，一种称为 “复制” 的收集算法出现了，它将内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块内存用完后，就将还存活的对象复制到另外一块上，然后再把已使用过的内存空间一次清理掉。这种算法解决了内存碎片的复杂情况，但是代价是将内存缩小为了原来的一半。<br><strong><em>HotSpot 并没有按照 1:1 的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的 Survivor 空间，比例为 8:1:1。<br>当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。这样每次新生代中可用内存空间为整个新生代容量的90%(80%+10%) ，只有10%的内存会被“浪费”。</em></strong></p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><p>复制收集算法在对象存活率较高时，就要进行较多的复制操作，效率会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。<br>固针对老年代的特点，提出了另一种“标记-整理”算法，具体过程为：</p>\n<ol>\n<li>标记：标记过程与“标记-清除”算法的标记一样。</li>\n<li>整理：将所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</li>\n</ol>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>当前商业虚拟机的垃圾收集都采用分代收集算法，这种算法的思想是 “<strong>根据对象存活周期的不同将内存划分为几块，对不同区域采用不同的收集算法</strong>” 。</p>\n<ul>\n<li>新生代：新生代每次收集进都有大批对象死去，只有少量存活，采用 <strong>复制算法</strong> 只需要付出少量的存活对象复制成本就可以完成收集。</li>\n<li>老年代：因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 <strong>标记-整理</strong> 或 <strong>标记-清除</strong> 算法来进行回收。</li>\n</ul>"},{"title":"对象存活算法","date":"2018-02-24T07:48:36.000Z","_content":"\n在堆里存入放java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定哪些对象还“活着”，哪些已经“死去”。\n\n<!-- more -->\n\n#### 引用计数算法\n引用计数器算法（Reference Counting）：给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。\n客观的说，引用计数器算法的实现简单，判定效率也很高，在大部分情况下是一个不错的算法，但它很难解决对象之间相互循环的问题。\n\n#### 可达性分析算法\n可达性分析算法（Reachability Analysis）这个算法的基本思路就是通过一系列称为“GC Root”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Root没有任何引用链相连时，则证明此对象是不可用的。\n在Java语言中可作为GC Root的对象包括下面几种：\n- 虚拟机栈（栈帧中的本地变量表）中引用的对象。\n- 方法区中类静态属性引用的对象。\n- 方法区中常量引用的对象。\n- 本地方法栈中JNI（即一般说的Native方法）引用的对象。\n\n#### Java引用的扩充\n对于对象我们希望：当内存空间还足够时，则能保留在内存之中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。\nJDK 1.2之后，Java对引用的概念进行了扩充，将引用分为以下4种：\n- 强引用（Strong Reference）：在程序代码中普遍存在的，类似 Object obj = new Object(); 这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉**被引用**的对象。\n- 软引用（Soft Reference）：描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常，在JDK 1.2之后 ，提供了SoftReference类来实现软引用。\n- 弱引用（Weak Reference）：描述非必需的对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2 之后，提供了WeakReference类来实现弱引用。\n- 虚引用（Phantom Reference）：也称为幽灵引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后 提供了PhatomReference类来实现虚引用。\n\n#### 方法区的回收\n方法区（或者HotSpot虚拟机中的永久代）的回收，主要回收两部分内容：废弃常量和无用的类。\n回收废弃的常量与回收Java堆中的对象类似。\n回收无用的类时，类需要满足下面3个条件：\n- 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n- 加载该类的ClassLoader已经被回收。\n- 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。","source":"_posts/对象存活算法.md","raw":"---\ntitle: 对象存活算法\ndate: 2018-02-24 15:48:36\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n在堆里存入放java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定哪些对象还“活着”，哪些已经“死去”。\n\n<!-- more -->\n\n#### 引用计数算法\n引用计数器算法（Reference Counting）：给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。\n客观的说，引用计数器算法的实现简单，判定效率也很高，在大部分情况下是一个不错的算法，但它很难解决对象之间相互循环的问题。\n\n#### 可达性分析算法\n可达性分析算法（Reachability Analysis）这个算法的基本思路就是通过一系列称为“GC Root”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Root没有任何引用链相连时，则证明此对象是不可用的。\n在Java语言中可作为GC Root的对象包括下面几种：\n- 虚拟机栈（栈帧中的本地变量表）中引用的对象。\n- 方法区中类静态属性引用的对象。\n- 方法区中常量引用的对象。\n- 本地方法栈中JNI（即一般说的Native方法）引用的对象。\n\n#### Java引用的扩充\n对于对象我们希望：当内存空间还足够时，则能保留在内存之中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。\nJDK 1.2之后，Java对引用的概念进行了扩充，将引用分为以下4种：\n- 强引用（Strong Reference）：在程序代码中普遍存在的，类似 Object obj = new Object(); 这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉**被引用**的对象。\n- 软引用（Soft Reference）：描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常，在JDK 1.2之后 ，提供了SoftReference类来实现软引用。\n- 弱引用（Weak Reference）：描述非必需的对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2 之后，提供了WeakReference类来实现弱引用。\n- 虚引用（Phantom Reference）：也称为幽灵引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后 提供了PhatomReference类来实现虚引用。\n\n#### 方法区的回收\n方法区（或者HotSpot虚拟机中的永久代）的回收，主要回收两部分内容：废弃常量和无用的类。\n回收废弃的常量与回收Java堆中的对象类似。\n回收无用的类时，类需要满足下面3个条件：\n- 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n- 加载该类的ClassLoader已经被回收。\n- 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。","slug":"对象存活算法","published":1,"updated":"2018-02-24T07:50:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje157qew0009gf9kttk4k42c","content":"<p>在堆里存入放java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定哪些对象还“活着”，哪些已经“死去”。</p>\n<a id=\"more\"></a>\n<h4 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h4><p>引用计数器算法（Reference Counting）：给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>客观的说，引用计数器算法的实现简单，判定效率也很高，在大部分情况下是一个不错的算法，但它很难解决对象之间相互循环的问题。</p>\n<h4 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h4><p>可达性分析算法（Reachability Analysis）这个算法的基本思路就是通过一系列称为“GC Root”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Root没有任何引用链相连时，则证明此对象是不可用的。<br>在Java语言中可作为GC Root的对象包括下面几种：</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>\n<li>方法区中类静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>\n</ul>\n<h4 id=\"Java引用的扩充\"><a href=\"#Java引用的扩充\" class=\"headerlink\" title=\"Java引用的扩充\"></a>Java引用的扩充</h4><p>对于对象我们希望：当内存空间还足够时，则能保留在内存之中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。<br>JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为以下4种：</p>\n<ul>\n<li>强引用（Strong Reference）：在程序代码中普遍存在的，类似 Object obj = new Object(); 这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉<strong>被引用</strong>的对象。</li>\n<li>软引用（Soft Reference）：描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常，在JDK 1.2之后 ，提供了SoftReference类来实现软引用。</li>\n<li>弱引用（Weak Reference）：描述非必需的对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2 之后，提供了WeakReference类来实现弱引用。</li>\n<li>虚引用（Phantom Reference）：也称为幽灵引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后 提供了PhatomReference类来实现虚引用。</li>\n</ul>\n<h4 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h4><p>方法区（或者HotSpot虚拟机中的永久代）的回收，主要回收两部分内容：废弃常量和无用的类。<br>回收废弃的常量与回收Java堆中的对象类似。<br>回收无用的类时，类需要满足下面3个条件：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在堆里存入放java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定哪些对象还“活着”，哪些已经“死去”。</p>","more":"<h4 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h4><p>引用计数器算法（Reference Counting）：给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>客观的说，引用计数器算法的实现简单，判定效率也很高，在大部分情况下是一个不错的算法，但它很难解决对象之间相互循环的问题。</p>\n<h4 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h4><p>可达性分析算法（Reachability Analysis）这个算法的基本思路就是通过一系列称为“GC Root”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Root没有任何引用链相连时，则证明此对象是不可用的。<br>在Java语言中可作为GC Root的对象包括下面几种：</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>\n<li>方法区中类静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>\n</ul>\n<h4 id=\"Java引用的扩充\"><a href=\"#Java引用的扩充\" class=\"headerlink\" title=\"Java引用的扩充\"></a>Java引用的扩充</h4><p>对于对象我们希望：当内存空间还足够时，则能保留在内存之中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。<br>JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为以下4种：</p>\n<ul>\n<li>强引用（Strong Reference）：在程序代码中普遍存在的，类似 Object obj = new Object(); 这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉<strong>被引用</strong>的对象。</li>\n<li>软引用（Soft Reference）：描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常，在JDK 1.2之后 ，提供了SoftReference类来实现软引用。</li>\n<li>弱引用（Weak Reference）：描述非必需的对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2 之后，提供了WeakReference类来实现弱引用。</li>\n<li>虚引用（Phantom Reference）：也称为幽灵引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后 提供了PhatomReference类来实现虚引用。</li>\n</ul>\n<h4 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h4><p>方法区（或者HotSpot虚拟机中的永久代）的回收，主要回收两部分内容：废弃常量和无用的类。<br>回收废弃的常量与回收Java堆中的对象类似。<br>回收无用的类时，类需要满足下面3个条件：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/JVM运行时数据区域/image.png","slug":"image.png","post":"cje157qdg0000gf9kzfdexk4z","modified":1,"renderable":0},{"_id":"source/_posts/内存模型/guanxitu.png","post":"cje157qe60006gf9kblb42bm5","slug":"guanxitu.png","modified":1,"renderable":1},{"_id":"source/_posts/内存模型/shilingtu.png","post":"cje157qe60006gf9kblb42bm5","slug":"shilingtu.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cje157qen0008gf9kn7ffdjfg","category_id":"cje157qe30004gf9k5idlsibd","_id":"cje157qf2000egf9kehefsq2u"},{"post_id":"cje157qdg0000gf9kzfdexk4z","category_id":"cje157qe30004gf9k5idlsibd","_id":"cje157qf5000hgf9kguitsf0s"},{"post_id":"cje157qew0009gf9kttk4k42c","category_id":"cje157qe30004gf9k5idlsibd","_id":"cje157qf7000jgf9kk24p2k36"},{"post_id":"cje157qdr0002gf9kgqn2yczu","category_id":"cje157qez000agf9kkj75sdzl","_id":"cje157qf8000mgf9k4qmps8d8"},{"post_id":"cje157qe60006gf9kblb42bm5","category_id":"cje157qe30004gf9k5idlsibd","_id":"cje157qf9000ngf9kv7an0f7p"}],"PostTag":[{"post_id":"cje157qen0008gf9kn7ffdjfg","tag_id":"cje157qe50005gf9krs8e0e0k","_id":"cje157qf0000cgf9k6cuabpxo"},{"post_id":"cje157qew0009gf9kttk4k42c","tag_id":"cje157qe50005gf9krs8e0e0k","_id":"cje157qf1000dgf9kxjbc6krh"},{"post_id":"cje157qdg0000gf9kzfdexk4z","tag_id":"cje157qe50005gf9krs8e0e0k","_id":"cje157qf6000igf9kka3cg7of"},{"post_id":"cje157qdg0000gf9kzfdexk4z","tag_id":"cje157qez000bgf9kp3bclzsu","_id":"cje157qf7000kgf9k45woc415"},{"post_id":"cje157qdr0002gf9kgqn2yczu","tag_id":"cje157qf3000ggf9ko7ekvmvq","_id":"cje157qff000sgf9kdxmfgjx3"},{"post_id":"cje157qdr0002gf9kgqn2yczu","tag_id":"cje157qf7000lgf9krrfrkq48","_id":"cje157qfg000tgf9k7dhifkud"},{"post_id":"cje157qdr0002gf9kgqn2yczu","tag_id":"cje157qf3000ggf9ko7ekvmvq","_id":"cje157qfg000ugf9kh1bwj2ts"},{"post_id":"cje157qdr0002gf9kgqn2yczu","tag_id":"cje157qfa000pgf9kfmhu039s","_id":"cje157qfh000vgf9kwiubw320"},{"post_id":"cje157qdr0002gf9kgqn2yczu","tag_id":"cje157qfb000qgf9karnorgxs","_id":"cje157qfh000wgf9ku528o5p0"},{"post_id":"cje157qe60006gf9kblb42bm5","tag_id":"cje157qe50005gf9krs8e0e0k","_id":"cje157qfi000xgf9kmz8xlm1d"}],"Tag":[{"name":"JVM","_id":"cje157qe50005gf9krs8e0e0k"},{"name":"运行时区域","_id":"cje157qez000bgf9kp3bclzsu"},{"name":"spring","_id":"cje157qf3000ggf9ko7ekvmvq"},{"name":"security","_id":"cje157qf7000lgf9krrfrkq48"},{"name":"安全","_id":"cje157qfa000pgf9kfmhu039s"},{"name":"权限控制","_id":"cje157qfb000qgf9karnorgxs"}]}}